#!/bin/bash

########### EDIT THIS BLOCK WITH SLURM & APPTAINER/SINGULARITY SETTINGS ############
#SBATCH --time=6-00:00:00   
#SBATCH --nodes=1  
#SBATCH --ntasks-per-node=64
#SBATCH --mem=512Gb
#SBATCH --partition=ceres
#SBATCH --account=coffea_pangenome

module load apptainer &> /dev/null || true
#module load singularity &> /dev/null || true
SINGULARITY_TMPDIR=$APPTAINER_TMPDIR
########### EDIT THIS BLOCK WITH SLURM & APPTAINER/SINGULARITY SETTINGS ############

# Default values
SAMPLE=""
MAP_FILE=""
t=64
MEM=512
VERSION="v1.7"

# Display help message
function show_help {
    echo "Usage: puzzler [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -s, --sample SAMPLE       Sample name (required)"
    echo "  -m, --map FILE            Path to .tsv/.csv map file (required)"
    echo "  --threads t           Number of threads (optional; default 64)"
    echo "  --mem MEM             Memory allocation (optional; default 512)"
	echo "  -v, --version         Show version and exit"
    echo "  -h, --help                Show help and exit"
    exit 0
}

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -h|--help) show_help ;;  
		-v|--version) echo "puzzler version: $VERSION"; exit 0 ;;
        -s|--sample) SAMPLE="$2"; shift ;;
        -m|--map) MAP_FILE="$2"; shift ;;
        --threads) t="$2"; shift ;;
        --mem) MEM="$2"; shift ;;
        *) echo "Unknown option: $1"; exit 1 ;;
    esac
    shift
done

# Validate required arguments
if [ -z "$SAMPLE" ]; then
    echo "Error: --sample argument is required."
    exit 1
fi

if [ -z "$MAP_FILE" ]; then
    echo "Error: --map argument is required."
    exit 1
fi

# Read CSV line matching sample and assign fields
IFS=$'\t,' read -r _ RUNTIME SIF_PATH WD PLOIDY NUM_CHRS HIFI HIC_R1 HIC_R2 REFERENCE HOM_COV BLOB_DB BUSCO_LINEAGE BUSCO_DB < <(
    awk -F'[\t,]' -v sample="$SAMPLE" '$1 == sample {print $0}' "${MAP_FILE}"
)

if [ "$RUNTIME" = "conda" ]; then
    PUZZLER=""  # No runtime needed for Conda
else
    PUZZLER="${RUNTIME} exec ${SIF_PATH}"
fi

cat << "EOF"

=======================================================================
__________ ____ _______________________.____     _____________________ 
\______   \    |   \____    /\____    /|    |    \_   _____/\______   \
 |     ___/    |   / /     /   /     / |    |     |    __)_  |       _/
 |    |   |    |  / /     /_  /     /_ |    |___  |        \ |    |   \
 |____|   |______/ /_______ \/_______ \|_______ \/_______  / |____|_  /
                           \/        \/        \/        \/         \/ 
=======================================================================

EOF

echo -e "=======================================================================\nParameters for sample: ${SAMPLE} \nCONTAINER: ${SIF_PATH} \nWD: ${WD} \nPLOIDY: ${PLOIDY} \nNUMBER CHRS: ${NUM_CHRS}\nHIFI: ${HIFI}\nHIC_R1: ${HIC_R1}\nHIC_R2: ${HIC_R2}\nREFERENCE: ${REFERENCE}\nHOM_COV: ${HOM_COV}\nBLOB_DB: ${BLOB_DB}\nBUSCO_LINEAGE: ${BUSCO_LINEAGE}\nBUSCO_DB: ${BUSCO_DB}\nRUNTIME: ${RUNTIME}\n=======================================================================\n"

set -euo pipefail
$PUZZLER hifiasm --version > /dev/null 2>&1 || { -e "\e[40m~~~~ hifiasm not found, is runtime set and container exists? ~~~~\e[0m"; exit 1; } 
$PUZZLER haphic --version > /dev/null 2>&1 || { -e "\e[40m~~~~ haphic not found, is runtime set and container exists? ~~~~\e[0m"; exit 1; } 
set +e +u +o pipefail 

mkdir -p ${WD}/primary_asm/stats ${WD}/juicer_files ${WD}/${SAMPLE}/01_hifiasm ${WD}/${SAMPLE}/02_purge_dups ${WD}/${SAMPLE}/03_haphic ${WD}/${SAMPLE}/04_juicer ${WD}/${SAMPLE}/05_postjuicebox ${WD}/${SAMPLE}/06_realign_hic_hifi ${WD}/${SAMPLE}/07_busco_yak_blob

##### HIFIASM: Generate Primary Assembly #####
if [ -s "${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa" ]; then
    echo -e "\e[42m~~~~ Skipping hifiasm for ${SAMPLE}: ${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa exists ~~~~\e[0m"
elif [ ! -s "${HIFI}" ]; then
    echo -e "\e[41m~~~~ Skipping hifiasm for ${SAMPLE}, missing input: ${HIFI} ~~~~\e[0m"
	exit 1 
elif [ -s "${HIC_R1}" ]; then
    echo -e "\e[43m~~~~ Starting hifiasm assembly for ${SAMPLE} ~~~~\e[0m"
    cd "${WD}/${SAMPLE}/01_hifiasm"

	# Run hifiasm
    RUN_ASM="${PUZZLER} hifiasm --primary -t ${t} -o asm --h1 ${HIC_R1} --h2 ${HIC_R2} ${HIFI}"
    if [[ -z "$HOM_COV" || "$HOM_COV" == "NA" ]]; then
        RUN_ASM="$RUN_ASM --hom-cov ${HOM_COV}"
    fi
    $RUN_ASM 2> "${SAMPLE}.hifiasm.log"
else
    echo -e "\e[41m~~~~ Skipping hifiasm for ${SAMPLE}, missing input: ${HIC_R1} ~~~~\e[0m"
	exit 1 
fi

##### PURGE_DUPS: Purge duplicates based on sequence #####
if [ -s "${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa" ]; then
	echo -e "\e[42m~~~~ Skipping purge for ${SAMPLE}: ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa exists ~~~~\e[0m"
elif [ ! -s "${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa" ]; then
    echo -e "\e[41m~~~~ Skipping Purge_Dups for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa ~~~~\e[0m"
	exit 1 
else
	echo -e "\e[43m~~~~ Starting Purge_Dups for ${SAMPLE} ~~~~\e[0m"
	cd ${WD}/${SAMPLE}/02_purge_dups
	#Ensure fastas have proper contig haplotype names 
	awk '/^S/{print ">"$2;print $3}' ${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa > pri.init.fa

	# Purge duplicates
	${PUZZLER} split_fa pri.init.fa > pri.split.fa
	${PUZZLER} minimap2 -t ${t} -xasm5 -DP pri.split.fa pri.split.fa 2> ${SAMPLE}.minimap.purge.log | gzip -c > pri.split.self.paf.gz
	${PUZZLER} purge_dups -M1000 -E1000 pri.split.self.paf.gz > pri.dups.bed 2> ${SAMPLE}.purge.log

	# Check if pri.dups.bed is empty
	if [ ! -s pri.dups.bed ]; then
		echo -e "\e[42m~~~~ Skipping purge for ${SAMPLE}: no duplicates found! ~~~~\e[0m"
		cp pri.split.fa p_ctg.purged.fa 
	else
		# Continue with purge process if duplicates exist
		${PUZZLER} get_seqs pri.dups.bed pri.init.fa 2> "${SAMPLE}.getseqs.log"
		mv purged.fa p_ctg.purged.fa
	fi
fi

##### ALIGN HIC #####
if [ -s "${WD}/${SAMPLE}/03_haphic/filtered.bam" ]; then
	echo -e "\e[42m~~~~ Skipping HiC alignment for ${SAMPLE}: ${WD}/${SAMPLE}/03_haphic/filtered.bam exists ~~~~\e[0m"
elif [ ! -s "${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa" ]; then
    echo -e "\e[41m~~~~ Skipping HiC alignment for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ~~~~\e[0m"
	exit 1 
else
	echo -e "\e[43m~~~~ Mapping HiC reads to ${SAMPLE} draft ~~~~\e[0m" 
	cd ${WD}/${SAMPLE}/03_haphic
	# Index reference
	${PUZZLER} bwa-mem2 index ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa > ${SAMPLE}.alignment.indexing.hic.log 2>&1

	# Align Hi-C reads
	{ ${PUZZLER} bwa-mem2 mem -5SP -t ${t} ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ${HIC_R1} ${HIC_R2} | \
		${PUZZLER} samblaster | \
		${PUZZLER} samtools view - -@ ${t} -S -h -b -F 3340 | \
		${PUZZLER} filter_bam - 1 --nm 3 --threads ${t} | \
		${PUZZLER} samtools view - -b -@ ${t} -o filtered.bam; } > ${SAMPLE}.alignment.hic.log 2>&1
fi

##### HAPHIC #####
if [ -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ]; then 
	echo -e "\e[42m~~~~ Skipping HapHiC for ${SAMPLE}: ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa exists ~~~~\e[0m"
elif [ ! -s "${WD}/${SAMPLE}/03_haphic/filtered.bam" ]; then
	echo -e "\e[41m~~~~ Skipping HapHiC for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/03_haphic/filtered.bam ~~~~\e[0m"
	exit 1 
elif [[ -z "$NUM_CHRS" || "$NUM_CHRS" == "NA" ]]; then
	echo -e "\e[41m~~~~ Skipping HapHiC for ${SAMPLE}, must specify chromosome number estimate or guess ~~~~\e[0m"
	exit 1 
else

	echo -e "\e[43m~~~~ Running HapHiC for ${SAMPLE}  ~~~~\e[0m" 
	mkdir -p ${WD}/${SAMPLE}/03_haphic/haphic
	# Clean up any previous runs, otherwise fails ... 
	rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*

	cd ${WD}/${SAMPLE}/03_haphic/haphic/
	${PUZZLER} haphic pipeline ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ../filtered.bam ${NUM_CHRS} --remove_allelic_links ${PLOIDY} --correct_nrounds 2 --max_inflation 20.0 --threads ${t} --processes ${t} 2> ../${SAMPLE}.haphic.log
	cp ${WD}/${SAMPLE}/03_haphic/haphic/01.cluster/HapHiC_cluster.log ${WD}/${SAMPLE}/03_haphic/${SAMPLE}.haphic.cluster_WOULD_CONTAIN_ERRORS.log

	# IF HapHic failed with the specified number of chromosomes $NUM_CHRS, then loop from NUM_CHRS - 1, NUM_CHRS - 2, until successful 
	if [ ! -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ]; then
	rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*

	# Define range of chrs to test: Within 4 of NUM_CHRS
	START=$(( NUM_CHRS - 4 ))
	END=$(( NUM_CHRS + 4 ))

	# Prevent negative starting values (if NUM_CHRS < 4)
	if (( START < 1 )); then
		START=1
	fi

	# Loop through values within 4 of NUM_CHRS
	for (( CHR_ATTEMPT=START; CHR_ATTEMPT<=END; CHR_ATTEMPT++ )); do

        echo -e "\e[43m~~~~ HapHiC for ${SAMPLE} with ${NUM_CHRS} chrs failed, trying: ${CHR_ATTEMPT} ~~~~\e[0m"
        mkdir -p ${WD}/${SAMPLE}/03_haphic/haphic
        cd ${WD}/${SAMPLE}/03_haphic/haphic
        
        ${PUZZLER} haphic pipeline ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ../filtered.bam ${CHR_ATTEMPT} --remove_allelic_links ${PLOIDY} --correct_nrounds 2 --max_inflation 20.0 --threads ${t} --processes ${t} 2> ../${SAMPLE}.haphic_N_chrs${CHR_ATTEMPT}.log

        # Check if scaffolds.fa exists
        if [ -s ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa ]; then
            echo -e "\e[43m~~~~  HapHiC completed successfully with NUM_CHRS=${CHR_ATTEMPT} ~~~~\e[0m"
            break
        else
            rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*
        fi
    done

	fi 

	# IF this still failed, then just scaffold with YAHS 
	if [ ! -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ]; then

		echo -e "\e[43m~~~~ HapHiC for ${SAMPLE} failed, scaffolding with YAHS instead ~~~~\e[0m"
		cd ${WD}/${SAMPLE}/03_haphic
		rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*
		mkdir -p ${WD}/${SAMPLE}/03_haphic/haphic/04.build

		${PUZZLER} samtools faidx ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa
		${PUZZLER} yahs ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa filtered.bam > yahs.log 2>&1
		cp ${WD}/${SAMPLE}/03_haphic/yahs.out_scaffolds_final.fa ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa
		cp ${WD}/${SAMPLE}/03_haphic/yahs.out_scaffolds_final.agp ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.raw.agp
	fi 
fi

##### JUICER #####
if [ -s "${WD}/juicer_files/${SAMPLE}_JBAT.hic" ]; then
	echo -e "\e[42m~~~~ Skipping juicer HiC file creation for ${SAMPLE}: ${WD}/juicer_files/${SAMPLE}_JBAT.hic exists ~~~~\e[0m"
elif [ ! -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ]; then
	echo -e "\e[41m~~~~ Skipping juicer HiC file creation for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa ~~~~\e[0m"
	exit 1 
elif [ "${REFERENCE}" = "NA" ]; then
		#DO THIS IF NO REFERENCE SPECIFIED 
		echo -e "\e[43m~~~~ Creating Juicer file for ${SAMPLE} WITHOUT reference alignment: not provided! ~~~~\e[0m"
		cd ${WD}/${SAMPLE}/04_juicer

		${PUZZLER} samtools faidx ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa
		${PUZZLER} samtools faidx ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa
		${PUZZLER} juicer pre \
			-a -q 1 \
			-o haphic_JBAT \
			${WD}/${SAMPLE}/03_haphic/filtered.bam \
			${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.raw.agp \
			${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa.fai > haphic_JBAT.log 2>&1
		grep PRE_C_SIZE haphic_JBAT.log | \
			awk '{print $2" "$3}' > chrom.sizes
		${PUZZLER} java -Xmx${MEM}G -jar /opt/HapHiC/utils/juicer_tools.1.9.9_jcuda.0.8.jar pre \
			-r 5000000,4000000,3000000,2000000,1500000,1000000,750000,500000,250000,100000,50000 \
			haphic_JBAT.txt \
			haphic_JBAT.hic \
			chrom.sizes > juicer_pre.log 2>&1
			
		cp haphic_JBAT.hic ${WD}/juicer_files/${SAMPLE}_JBAT.hic
		cp haphic_JBAT.assembly ${WD}/juicer_files/${SAMPLE}_JBAT.assembly

else
	#DO THIS IF REFERENCE EXISTS
	echo -e "\e[43m~~~~ Creating .hic file for juicebox for ${SAMPLE}, with reference alignment  ~~~~\e[0m"
	cd ${WD}/${SAMPLE}/04_juicer

	# Orient chromosomes according to a related reference
	if [ ! -s "${WD}/${SAMPLE}/04_juicer/asm_to_ref.paf" ]; then
		${PUZZLER} minimap2 -x asm20 ${REFERENCE} ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa --secondary=no -t ${t} -o asm_to_ref.paf 2> minimap.ref.log
	else
		echo -e "\e[42m~~~~ Skipping initial alignment between reference and draft ~~~~\e[0m]"
	fi

	${PUZZLER} samtools faidx ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa
	${PUZZLER} samtools faidx ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa
	${PUZZLER} haphic refsort ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.raw.agp asm_to_ref.paf > refsort.agp 2> refsort.log
	${PUZZLER} juicer pre \
		-a -q 1 \
		-o haphic-refsort_JBAT \
		${WD}/${SAMPLE}/03_haphic/filtered.bam \
		refsort.agp \
		${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa.fai > haphic-refsort_JBAT.log 2>&1
	grep PRE_C_SIZE haphic-refsort_JBAT.log | \
		awk '{print $2" "$3}' > chrom.sizes
	${PUZZLER} java -Xmx${MEM}G -jar /opt/HapHiC/utils/juicer_tools.1.9.9_jcuda.0.8.jar pre \
		-r 5000000,4000000,3000000,2000000,1500000,1000000,750000,500000,250000,100000,50000 \
		haphic-refsort_JBAT.txt \
		haphic-refsort_JBAT.hic \
		chrom.sizes > juicer_pre.log 2>&1
		
	cp haphic-refsort_JBAT.hic ${WD}/juicer_files/${SAMPLE}_JBAT.hic
	cp haphic-refsort_JBAT.assembly ${WD}/juicer_files/${SAMPLE}_JBAT.assembly
fi 

##### Extract post juicebox assembly
if [ -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then 
		echo -e "\e[42m~~~~ Skipping post-juicer extraction for ${SAMPLE}: ${WD}/primary_asm/${SAMPLE}.fa exists ~~~~\e[0m"
elif [ ! -s "${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly" ]; then
	echo -e "\e[41m~~~~ Post curation assembly file missing for ${SAMPLE}: Run Juicebox & place in ${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly ~~~~\e[0m"
	exit 1 
elif [ "${REFERENCE}" = "NA" ]; then
    echo -e "\e[43m~~~~ No reference provided for ${SAMPLE}: simply extracting assembly to: ${WD}/primary_asm/${SAMPLE}.fa ~~~~\e[0m"
	cd ${WD}/${SAMPLE}/05_postjuicebox
	${PUZZLER} juicer post \
		-o haphic-post_JBAT \
		${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly \
		${WD}/${SAMPLE}/04_juicer/haphic_JBAT.liftover.agp \
		${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa 2> ${SAMPLE}.juicer.post.log
	cp haphic-post_JBAT.FINAL.fa ${WD}/primary_asm/${SAMPLE}.fa
else

	##### POST-JUICEBOX CHROMOSOME RENAMING #####
	# Create draft - reference map file 
	cd ${WD}/${SAMPLE}/05_postjuicebox
	if [ -s "${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa" ]; then 
		echo -e "\e[43m~~~~ Final assembly exists for ${SAMPLE}: ${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa ~~~~\e[0m"
	else
		if [ -s "${WD}/${SAMPLE}/05_postjuicebox/map.txt" ]; then
			echo -e "\e[42m~~~~ Skipping draft-reference mapping for ${SAMPLE}: ${WD}/${SAMPLE}/05_postjuicebox/map.txt exists ~~~~\e[0m"
		elif [ ! -s "${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa" ]; then
			echo -e "\e[41m~~~~ Skipping draft-reference mapping for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ~~~~\e[0m"
		elif [ ! -s "${WD}/${SAMPLE}/04_juicer/haphic-refsort_JBAT.liftover.agp" ]; then
			echo -e "\e[41m~~~~ Skipping draft-reference mapping for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/04_juicer/haphic-refsort_JBAT.liftover.agp ~~~~\e[0m"
		else
			echo -e "\e[43m~~~~ Extracting post-curation assembly and mapping to reference for ${SAMPLE} ~~~~\e[0m"
			${PUZZLER} juicer post \
				-o haphic-refsort-post_JBAT \
				${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly \
				${WD}/${SAMPLE}/04_juicer/haphic-refsort_JBAT.liftover.agp \
				${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa 2> ${SAMPLE}.juicer.post.log

			# If genome is massive, reduce minimap2 options
			MINIMAP_CMD="${PUZZLER} minimap2 -x asm20 ${REFERENCE} haphic-refsort-post_JBAT.FINAL.fa --secondary=no -t ${t} -o asmpost_to_paf.paf 2> ${SAMPLE}.minimap.postjuicer.log"

			# Calculate genome size in bytes
			GENOME_SIZE=$(wc -c < "haphic-refsort-post_JBAT.FINAL.fa")

			# Convert to GB
			GENOME_SIZE_GB=$((GENOME_SIZE / 1000000000))

			# Check if genome is larger than 3GB and add -n10 if needed
			if [ "$GENOME_SIZE_GB" -gt 3 ]; then
				MINIMAP_CMD="${PUZZLER} minimap2 -x asm5 -n10 -k21 -w19 ${REFERENCE} haphic-refsort-post_JBAT.FINAL.fa --secondary=no -t ${t} -o asmpost_to_paf.paf 2> ${SAMPLE}.minimap.postjuicer.log"
				echo -e "\e[43m~~~~ Genome size is ${GENOME_SIZE_GB}GB, adding -n10 -k21 -w19 to minimap2 command ~~~~\e[0m"
			else
				echo -e "\e[43m~~~~ Genome size is ${GENOME_SIZE_GB}GB, running default minimap2 command ~~~~\e[0m"
			fi

			# Run Minimap2
			eval "$MINIMAP_CMD"

			# Renaming: to reference chromosomes 
			${PUZZLER} minimap2 -x asm5 ${REFERENCE} haphic-refsort-post_JBAT.FINAL.fa --secondary=no -t ${t} -o asmpost_to_paf.paf 2> ${SAMPLE}.minimap.postjuicer.log
			${PUZZLER} samtools faidx haphic-refsort-post_JBAT.FINAL.fa
			${PUZZLER} samtools faidx ${REFERENCE}
			${PUZZLER} map_chromosomes --paf asmpost_to_paf.paf --fai haphic-refsort-post_JBAT.FINAL.fa.fai --out map.txt --min_size 0.1 &> mapping_renaming.log
		fi 
	fi 

	# Renaming script 
	if [ -s "${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa" ]; then 
		echo -e "\e[42m~~~~ Skipping renaming chromosomes for ${SAMPLE}: ${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa exists ~~~~\e[0m"
	elif [ ! -s "${WD}/${SAMPLE}/05_postjuicebox/map.txt" ]; then
		echo -e "\e[41m~~~~ Skipping renaming chromosomes for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/05_postjuicebox/map.txt~~~~\e[0m"
	else 
		echo -e "\e[43m~~~~ Renaming chromosomes for ${SAMPLE} ~~~~\e[0m"
		
		cd ${WD}/${SAMPLE}/05_postjuicebox
		# This file has $haphic_scafID \t $ref_chr_ID \t $strand
		awk '{OFS="\t"}{print $1, $2, $5, $3, $4}' map.txt | egrep 'chr|Chr' > chromosome_naming_map.txt 

		# Exclude those chromsomes from map, and then add e.g. scaf101405 for the remaining non-chromosome scaffolds 
		awk '{print $1}' chromosome_naming_map.txt > exclude_chr_scafIDs.txt
		grep -vwf exclude_chr_scafIDs.txt haphic-refsort-post_JBAT.FINAL.fa.fai | awk '{OFS="\t"}{print $1, $1, "+"}' >> chromosome_naming_map.txt

		# Must be the same number of scaffolds
		if [ $(cat chromosome_naming_map.txt | wc -l) -eq $(cat haphic-refsort-post_JBAT.FINAL.fa.fai | wc -l) ]; then
			echo -e "\e[43m~~~~ Scaffold sanity check passed for renaming, proceeding! ~~~~\e[0m"
		else
			echo -e "\e[41m~~~~ Not same number of scaffolds, stop and inspect ${WD}/${SAMPLE}/05_postjuicebox/chromosome_naming_map.txt ~~~~\e[0m"
			exit 1
		fi # exit scaffold check 

		# Orient chromosomes in the same strand direction 
		awk '{if ($3 == "-") print $1}' chromosome_naming_map.txt > reverse_list.txt
		awk '{if ($3 == "+") print $1}' chromosome_naming_map.txt > positive_list.txt
		${PUZZLER} seqtk subseq haphic-refsort-post_JBAT.FINAL.fa reverse_list.txt > to_revercomp.fa
		${PUZZLER} seqtk subseq haphic-refsort-post_JBAT.FINAL.fa positive_list.txt > positive.fa
		${PUZZLER} seqkit seq --line-width 0 -t DNA -v -r -p to_revercomp.fa > revcomp.fa
		cat positive.fa revcomp.fa > orient.fa
		rm reverse_list.txt positive_list.txt to_revercomp.fa positive.fa revcomp.fa

		# Detect if there are duplicate scaffolds
		awk '{print $2}' chromosome_naming_map.txt | sort | uniq -d > duplicates.txt

		##### THIS WILL DEAL WITH DUPLICATES, IN CASE THERE ARE 2 SCAFFOLDS CORRESPONDING TO A CHR! eg. Chr1A  
		if [ -s duplicates.txt ]; then
			
			echo -e "\e[41m~~~~ Multiple scaffolds corresponding to single Chr for ${SAMPLE}, Renaming them e.g. Chr1A, Chr1B.. ~~~~\e[0m"
			awk '
			{
				chr=$2
				len=$5
				data[chr][len] = $0  # full line indexed by chromosome and length
				lengths[chr][len] = len  # track lengths for sorting
				count[chr]++  # Count duplicate chromosome
			}
			END {
				# Sort by chromosome name numerically, then by length descending
				PROCINFO["sorted_in"] = "@ind_num_asc"
				for (chr in data) {
					n = 0
					asorti(lengths[chr], sorted_lengths, "@val_num_desc")  # sort in descending order
					for (i in sorted_lengths) {
						label = (n == 0) ? chr : chr sprintf("%c", 65 + n - 1)  # Assign e.g. A, B, C labels
						split(data[chr][sorted_lengths[i]], line, "\t")  # grab full line
						line[2] = label  # Update chromosome name
						print line[1], line[2], line[3], line[4], line[5]
						n++
					}
				}
			}
			' OFS='\t' chromosome_naming_map.txt > chromosome_renamed_map.txt
			cp chromosome_naming_map.txt chromosome_naming_map.ORIGINAL.txt
			mv chromosome_renamed_map.txt chromosome_naming_map.txt
			
		else 

			echo -e "\e[43m~~~~ Single scaffolds corresponding to a single Chr for ${SAMPLE} ~~~~\e[0m"
		fi # Exit duplicate scaffold check 

		# Finally, rename the chromosomes
		awk '$2 ~ /^chr/ {print $0}' chromosome_naming_map.txt | sort -k2,2V | awk '{print $2}' > sorted_chr.txt
		awk '$2 ~ /^scaffold_/ {print $0}' chromosome_naming_map.txt | sort -k2,2V | awk '{print $2}' >> sorted_chr.txt

		${PUZZLER} seqkit replace --line-width 0 -p "(.*)" -r "{kv}" -k chromosome_naming_map.txt orient.fa > haphic_renamed_unord.fa 2> seqkit_renaming.log
		${PUZZLER} samtools faidx haphic_renamed_unord.fa
		xargs ${PUZZLER} samtools faidx haphic_renamed_unord.fa < sorted_chr.txt > final_asm.fa
		cp ${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa ${WD}/primary_asm/${SAMPLE}.fa
		${PUZZLER} samtools faidx ${WD}/primary_asm/${SAMPLE}.fa

	fi # exit renaming check 

fi # exit loop check if juicebox file doesn't exist 

##################################################
###### OPTIONAL: ASSEMBLY QUALITY CHECKS!!! ######
##################################################

###### Final HIC mapping ##### 
if [ -s "${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam" ]; then 
	echo -e "\e[42m~~~~ Skipping alignment for final map ${SAMPLE}: ${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam exists ~~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
	echo -e "\e[41m~~~~ Skipping alignment for final map ${SAMPLE}, missing input: ${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa ~~~~\e[0m"
else 
	echo -e "\e[43m~~~~ Creating final HiC bam for ${SAMPLE} ~~~~\e[0m"
	cd ${WD}/${SAMPLE}/06_realign_hic_hifi

	ln -s ${WD}/primary_asm/${SAMPLE}.fa ${SAMPLE}.fa
	${PUZZLER} bwa-mem2 index ${SAMPLE}.fa > ${SAMPLE}.alignment.indexing.final.log 2>&1
	${PUZZLER} samtools faidx ${SAMPLE}.fa

	# Align Hi-C reads
	{ ${PUZZLER} bwa-mem2 mem -5SP -t ${t} ${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa ${HIC_R1} ${HIC_R2} | \
		${PUZZLER} samblaster | \
		${PUZZLER} samtools view - -@ ${t} -S -h -b -F 3340 | \
		${PUZZLER} filter_bam - 1 --nm 3 --threads ${t} --remove-dup | \
		${PUZZLER} samtools view - -b -@ ${t} -o final_asm.filtered.bam; } > ${SAMPLE}.alignment.final.log 2>&1
fi # exit final hic mapping check 

##### Final HIC Plotting ##### 
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.HiC_contacts.pdf" ]; then 
	echo -e "\e[42m~~~~ Skipping final contact map generating for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.pdf exists ~~~~\e[0m"
elif [ ! -s "${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam" ]; then
	echo -e "\e[41m~~~~ Skipping final contact map generating for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam ~~~~\e[0m"
else 
	echo -e "\e[43m~~~~ Creating final contact map for ${SAMPLE} ~~~~\e[0m"
	cd ${WD}/${SAMPLE}/06_realign_hic_hifi
	${PUZZLER} samtools faidx ${SAMPLE}.fa
	CHRS=$(egrep 'chr|Chr' ${SAMPLE}.fa.fai | grep -v 'SUPER' | cut -f1 | tr '\n' ',' | sed 's/,$//g')
	${PUZZLER} mock_agp_file.py ${SAMPLE}.fa > final_asm.agp
	${PUZZLER} haphic plot --threads ${t} final_asm.agp final_asm.filtered.bam --bin_size 1000 --specified_scaffolds ${CHRS} 2> haphic_plot.log

	# Copy over HiC map 
	cp contact_map.pdf ${WD}/primary_asm/stats/${SAMPLE}.HiC_contacts.pdf
fi # exit final hic plotting check 

##### Map HiFi Reads back to Assembly ##### 
if [ -s "${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam" ]; then 
	echo -e "\e[42m~~~~ Skipping HiFi coverage for ${SAMPLE}: ${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam ~~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
	echo -e "\e[41m~~~~ Skipping HiFi alignment for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~~\e[0m"
elif [ ! -s "${HIFI}" ]; then
	echo -e "\e[41m~~~~ Skipping HiFi alignment for ${SAMPLE}, missing input: ${HIFI} ~~~~\e[0m"
elif [ "$HIFI" = "NA" ]; then
	echo -e "\e[41m~~~~ Skipping HiFi alignment for ${SAMPLE}, not desired ~~~~\e[0m"
else 
    cd ${WD}/primary_asm/06

	# Alignment 
    echo -e "\e[43m~~~~ Starting HiFi Alignment for ${SAMPLE} ~~~~\e[0m"
    { ${PUZZLER} minimap2 -t ${t} -ax map-hifi \
        ${WD}/primary_asm/${SAMPLE}.fa ${HIFI} 2> ${SAMPLE}.hifi.minimap.log | \
        ${PUZZLER} samtools sort --threads ${t} -o asm.hifi.bam; } > hifi.alignment.log 2>&1
    ${PUZZLER} samtools index -c --threads ${t} asm.hifi.bam
    
fi # exit HiFi check

###### BUSCO ######
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.busco.txt" ]; then 
	echo -e "\e[42m~~~~ Skipping BUSCO for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.busco.txt exists ~~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
	echo -e "\e[41m~~~~ Skipping BUSCO for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~~\e[0m"
elif [[ ! -s "${BUSCO_LINEAGE}" || "${BUSCO_DB}" == "NA" ]]; then
	echo -e "\e[41m~~~~ Skipping BUSCO for ${SAMPLE}, not requested ~~~~\e[0m"
else 
	echo -e "\e[43m~~~~ Running BUSCO for ${SAMPLE} using lineage: ${BUSCO_LINEAGE} ~~~~\e[0m"
    cd ${WD}/${SAMPLE}/07_busco_yak_blob

    if [ ! -d "${BUSCO_DB}/lineages/${BUSCO_LINEAGE}" ]; then
        echo -e "\e[43m~~~~ Downloading BUSCO Lineage database: ${BUSCO_LINEAGE} ~~~~\e[0m"
        ${PUZZLER} busco --download ${BUSCO_LINEAGE} --download_path ${BUSCO_DB} > busco_download.log 2>&1
    else
        echo -e "\e[42m~~~~ BUSCO lineage dataset already exists, skipping ~~~~\e[0m"
    fi

    ${PUZZLER} busco -i ${WD}/primary_asm/${SAMPLE}.fa \
        -l ${BUSCO_DB}/lineages/${BUSCO_LINEAGE} \
        -m genome \
        -c ${t} \
        -o ${SAMPLE} \
        -f > busco.log 2>&1

    mv ${SAMPLE}/short_summary.specific.${BUSCO_LINEAGE}.${SAMPLE}.txt ${WD}/primary_asm/stats/${SAMPLE}.busco.txt
fi

##### YAK k-mer QV ##### 
if [ -s "${WD}/${SAMPLE}/07_busco_yak_blob/yak.qv.txt" ]; then 
	echo -e "\e[42m~~~~ Skipping YAK k-mer QV for ${SAMPLE}: ${WD}/${SAMPLE}/07_busco_yak_blob/yak.qv.txt exists ~~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
	echo -e "\e[41m~~~~ Skipping YAK k-mer QV for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~~\e[0m"
elif [ ! -s "${HIFI}" ]; then
	echo -e "\e[41m~~~~ Skipping YAK k-mer QV stats for ${SAMPLE}, missing input: ${HIFI} ~~~~\e[0m"
elif [ "$HIFI" = "NA" ]; then
	echo -e "\e[41m~~~~ Skipping YAK k-mer QV for ${SAMPLE}, not desired ~~~~\e[0m"
else 
	echo -e "\e[43m~~~~ Running YAK on ${SAMPLE} ~~~~\e[0m"
    cd ${WD}/${SAMPLE}/07_busco_yak_blob

    ${PUZZLER} yak count -b37 -t ${t} -o ccs.yak ${HIFI} > yak.count.log 2>&1
    ${PUZZLER} yak qv -t ${t} -p -K3.2g -l100k ccs.yak ${WD}/primary_asm/${SAMPLE}.fa > sr.qv.txt 2> yak.qv.log

fi

##### Blobtools contamination search ##### 
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.blob.stats.txt" ]; then 
	echo -e "\e[42m~~~~ Skipping blobtools for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.stats.txt exists ~~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
	echo -e "\e[41m~~~~ Skipping blobtools for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~~\e[0m"
elif [ ! -s "${HIFI}" ]; then
	echo -e "\e[41m~~~~ Skipping blobtools for ${SAMPLE}, missing input: ${HIFI} ~~~~\e[0m"
elif [ "${BLOB_DB}" = "NA" ]; then
	echo -e "\e[41m~~~~ Skipping blobtools for ${SAMPLE}, not desired ~~~~\e[0m"
else 
	echo -e "\e[43m~~~~ Running blobtools on ${SAMPLE} ~~~~\e[0m"

    # Download Refseq Taxdump
    cd ${BLOB_DB}
    mkdir -p data out
    if [ ! -s "${BLOB_DB}/data/nodes.dmp" ] || [ ! -s "${BLOB_DB}/data/nodesDB.txt" ]; then
        echo -e "\e[43m~~~~ Grabbing NCBI taxdump files ~~~~\e[0m"
        wget ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz -P data/ > ncbi_dump.wget.log 2>&1
        tar zxf data/taxdump.tar.gz -C data/ nodes.dmp names.dmp > ncbi_dump.tar.log 2>&1
	else
		echo -e "\e[42m~~~~ Skipping NCBI taxdump, ${BLOB_DB}/data/nodes.dmp exists ~~~~\e[0m"
	fi 

    # Download refseq nt databases (MASSIVE!) 
    mkdir -p ${BLOB_DB}/nt
    cd ${BLOB_DB}/nt
    if [ ! -s "${BLOB_DB}/nt/core_nt.ndb" ]; then
        echo -e "\e[43m~~~~ Downloading RefSeq nt database.... will take hours ~~~~\e[0m"
        ${PUZZLER} update_blastdb.pl --force_ftp --num_threads ${t} --decompress nt [*]
        # curl -s ftp://ftp.ncbi.nlm.nih.gov/blast/db/ | grep "nt.[0-9][0-9].tar.gz" | awk '{print "ftp://ftp.ncbi.nlm.nih.gov/blast/db/"$NF}' | xargs -n 1 wget -P nt/
        # for file in nt/*.tar.gz; do 
        #     tar xf $file -C nt && rm $file; 
        # done
	else
		echo -e "\e[42m~~~~ Skipping RefSeq nt download, ${BLOB_DB}/nr/core_nt.ndb exists ~~~~\e[0m"
	fi 

    cd ${WD}/${SAMPLE}/07_busco_yak_blob
    if [ ! -s "${SAMPLE}_blast.out" ]; then
        echo -e "\e[43m~~~~ Blasting ${SAMPLE} against databases ~~~~\e[0m"
        ${PUZZLER} blastn -db ${BLOB_DB}/nt/nt_core \
            -query ${WD}/primary_asm/${SAMPLE}.fa \
            -outfmt "6 qseqid staxids bitscore std" \
            -max_target_seqs 10 \
            -max_hsps 1 \
            -evalue 1e-25 \
            -num_threads ${t} \
            -out blast.out > blast.log 2>&1
	else
		echo -e "\e[42m~~~~ Skipping blast, ${WD}/${SAMPLE}/07_busco_yak_blob/blast.out exists ~~~~\e[0m"
	fi 

    if [ ! -s "blast.out" ]; then
    	echo -e "\e[41m~~~~ Blast file is empty for ${SAMPLE}, check ${WD}/${SAMPLE}/07_busco_yak_blob/blast.log ~~~~\e[0m"
    elif [ -s "${BLOB_DB}/data/nodesDB.txt" ]; then

        echo -e "\e[43m~~~~ Creating blobplot for ${SAMPLE} ~~~~\e[0m"  
        { ${PUZZLER} blobtools create -i ${WD}/primary_asm/${SAMPLE}.fa -b ${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam -t blast.out \
            --db ${BLOB_DB}/data/nodesDB.txt -o ${SAMPLE} && \
            ${PUZZLER} blobtools view -i ${SAMPLE}.blobDB.json && \
            ${PUZZLER} blobtools plot -i ${SAMPLE}.blobDB.json --format pdf; } > blob.log 2>&1
        cp ${SAMPLE}*blobplot.bam0.pdf ${WD}/primary_asm/stats/${SAMPLE}.blob.pdf
        cp ${SAMPLE}.*blobplot.stats.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.stats.txt
        cp ${SAMPLE}.*table.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.contaminants.txt

    elif [ ! -s "${BLOB_DB}/data/nodesDB.txt" ]; then 

        echo -e "\e[43m~~~~ Creating blobplot for ${SAMPLE} ~~~~\e[0m"
        { ${PUZZLER} blobtools create -i ${WD}/primary_asm/${SAMPLE}.fa -b ${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam -t blast.out \
            --nodes ${BLOB_DB}/data/nodes.dmp --names ${BLOB_DB}/data/names.dmp --db ${BLOB_DB}/data/nodesDB.txt -o ${SAMPLE} && \
            ${PUZZLER} blobtools view -i ${SAMPLE}.blobDB.json && \
            ${PUZZLER} blobtools plot -i ${SAMPLE}.blobDB.json --format pdf; } > blob.log 2>&1
        cp ${SAMPLE}*blobplot.bam0.pdf ${WD}/primary_asm/stats/${SAMPLE}.blob.pdf
        cp ${SAMPLE}.*blobplot.stats.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.stats.txt
        cp ${SAMPLE}.*table.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.contaminants.txt

	else
		echo -e "\e[42m~~~~ Skipping blobtools, ${BLOB_DB}/data/nodesDB.txt is missing ~~~~\e[0m"
	fi 
fi

##### Basic Assembly Stats ##### 
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.stats.txt" ]; then 
	echo -e "\e[42m~~~~ Skipping final assembly stats for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.stats.txt exists ~~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
	echo -e "\e[41m~~~~ Skipping final assembly stats for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~~\e[0m"
else 

	echo -e "\e[43m~~~~ Summarizing Assembly for ${SAMPLE} ~~~~\e[0m"
    # Get metrics for final assembly
    cd ${WD}/${SAMPLE}/07_busco_yak_blob

    FINAL_STATS=$(${PUZZLER} assembly_stats ${WD}/primary_asm/${SAMPLE}.fa)
    SIZE=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'total_bps' | tail -n1 | sed 's/,//g')
    SEQS=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'sequence' | tail -n1 | sed 's/,//g')
    CTGS=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'sequence' | head -n2 | tail -n1 | sed 's/,//g')
    SCAF_N50=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'N50' | tail -n1 | sed 's/,//g')
    CONT_N50=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'N50' | head -n2 | tail -n1 | sed 's/,//g')
    GAPS=$((CTGS - SEQS))

    # What percentage of the assembly is in named chromosomes. This will remove e.g. chr1_SUPER_Unloc scaffolds! (Just remove the "grep -v 'SUPER' if you want those...")
    ${PUZZLER} samtools faidx ${WD}/primary_asm/${SAMPLE}.fa
    egrep 'chr|Chr' ${WD}/primary_asm/${SAMPLE}.fa.fai | awk '$1 !~ /A/' | grep -v 'SUPER' | cut -f1 > ${SAMPLE}.chrs
    ${PUZZLER} samtools faidx ${WD}/primary_asm/${SAMPLE}.fa -r ${SAMPLE}.chrs > ${SAMPLE}.chr.fa
    CHR_STATS=$(${PUZZLER} assembly_stats ${SAMPLE}.chr.fa)
    CHR_SIZE=$(echo "$CHR_STATS" | tr ':' '\n' | grep -A 1 'total_bps' | tail -n1 | sed 's/,//g')
    CHR_PROP=$(${PUZZLER} perl -e "print sprintf('%.4f', $CHR_SIZE / $SIZE)")
    NUM_CHRS=$(cat ${SAMPLE}.chrs | wc -l)

    HEADER="Sample\tSizeBP\tWithinChrsBP\tPropWithinChrs\tChrs\tSequences\tContigs\tGaps\tContigN50\tScafN50"
    VALUES="${SAMPLE}\t$SIZE\t$CHR_SIZE\t$CHR_PROP\t$NUM_CHRS\t$SEQS\t$CTGS\t$GAPS\t$CONT_N50\t$SCAF_N50"

    # Add BUSCO metrics **only if BUSCO_LINEAGE is not "NA"**
    if [ "$BUSCO_LINEAGE" != "NA" ]; then
        # Parse BUSCO results
        BUSCO_COMPLETE=$(grep "C:" ${WD}/primary_asm/stats/${SAMPLE}.busco.txt | cut -d'[' -f1 | cut -d':' -f2 | cut -d'%' -f1)
        BUSCO_SINGLE=$(grep "C:" ${WD}/primary_asm/stats/${SAMPLE}.busco.txt | cut -d'[' -f2 | cut -d'%' -f1 | sed 's/S://g')

        HEADER+="\tBUSCO_Complete\tBUSCO_singlecopy"
        VALUES+="\t$BUSCO_COMPLETE\t$BUSCO_SINGLE"
    fi

    # Add QV metrics **only if HIFI is not "NA"**
    if [ "$HIFI" != "NA" ]; then
        # Parse QV results
        YAK_CV=$(awk '$1 == "CV"' ${WD}/${SAMPLE}/07_busco_yak_blob/sr.qv.txt | cut -f2)
        YAK_QV=$(awk '$1 == "QV"' ${WD}/${SAMPLE}/07_busco_yak_blob/sr.qv.txt | cut -f2)

        HEADER+="\tYAK_CV\tYAK_QV"
        VALUES+="\t$YAK_CV\t$YAK_QV"
    fi

    # Write to summary file
    echo -e "$HEADER" > ${WD}/primary_asm/stats/${SAMPLE}.summary.txt
    echo -e "$VALUES" >> ${WD}/primary_asm/stats/${SAMPLE}.summary.txt

fi # exit assembly stat check