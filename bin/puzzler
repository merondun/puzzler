#!/bin/bash

########### EDIT THIS BLOCK WITH SLURM & APPTAINER/SINGULARITY SETTINGS ############
#SBATCH --time=4-00:00:00   
#SBATCH --nodes=1  
#SBATCH --ntasks-per-node=12
#SBATCH --mem=36Gb
#SBATCH --partition=ceres
#SBATCH --account=coffea_pangenome

module load apptainer &> /dev/null || true
#module load singularity &> /dev/null || true
SINGULARITY_TMPDIR=$APPTAINER_TMPDIR
########### EDIT THIS BLOCK WITH SLURM & APPTAINER/SINGULARITY SETTINGS ############

# Default values
SAMPLE=""
MAP_FILE=""
t=64
MEM=512
VERSION="v1.8"
NO_JUICE="FALSE"

# Display help message
function show_help {
    echo "Usage: ${puzzler} [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -s, --sample SAMPLE   Sample name (required)"
    echo "  -m, --map FILE        Path to .tsv/.csv map file (required)"
    echo "  --threads t           Number of threads (optional; default 64)"
    echo "  --mem MEM             Memory allocation (optional; default 512)"
    echo "  --no_juice            Skip juicer file creation entirely (optional; not recommended!)"
    echo "  -v, --version         Show version and exit"
    echo "  -h, --help            Show help and exit"
    echo ""
    echo "  Required --map Structure:"
    echo "  The provided map file (e.g., samples.txt) must contain the following columns in this order:"
    echo "  RUNTIME CONTAINER WD HIFI HIC_R1 HIC_R2 NUM_CHRS REFERENCE HOM_COV BLOB_DB BUSCO_LINEAGE BUSCO_DB"
    echo "  For optional columns (REFERENCE - BUSCO_DB), write "NA" if undesired."
    echo ""

    exit 0
}

########## start checks #############

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -h|--help) show_help ;;  
        -v|--version) echo "${puzzler} version: $VERSION"; exit 0 ;;
        -s|--sample) SAMPLE="$2"; shift ;;
        -m|--map) MAP_FILE="$2"; shift ;;
        --no_juice) NO_JUICE="TRUE" ;;
        --threads) t="$2"; shift ;;
        --mem) MEM="$2"; shift ;;
        *) echo "Unknown option: $1"; exit 1 ;;
    esac
    shift
done

# Validate required arguments
if [ -z "$SAMPLE" ]; then
    echo "Error: --sample argument is required."
    exit 1
fi

if [ -z "$MAP_FILE" ]; then
    echo "Error: --map argument is required."
    exit 1
fi

# Read either tsv or csv and assign variables from map file
IFS=$'\t,' read -r _ RUNTIME CONTAINER WD HIFI HIC_R1 HIC_R2 NUM_CHRS REFERENCE HOM_COV BLOB_DB BUSCO_LINEAGE BUSCO_DB < <(
    awk -F'[\t,]' -v sample="$SAMPLE" '$1 == sample {print $0}' "${MAP_FILE}"
)

# Check if mandatory fields (RUNTIME - NUM_CHRS) are empty
if [[ -z "$RUNTIME" || -z "$CONTAINER" || -z "$WD" || -z "$HIFI" || -z "$HIC_R1" || -z "$HIC_R2" || -z "$NUM_CHRS" ]]; then
    echo -e "\e[41m~~~ ERROR: Missing required fields (RUNTIME - NUM_CHRS). Exiting. ~~~\e[0m"
    exit 1
fi

# Set REFERENCE - BUSCO_DB to "NA" if empty, otherwise extract full path
HOM_COV="${HOM_COV:-NA}"
BUSCO_LINEAGE="${BUSCO_LINEAGE:-NA}"
for option in REFERENCE BLOB_DB BUSCO_DB; do
    [[ "${!option}" != "NA" && -n "${!option}" ]] && declare "$option=$(realpath "${!option}")" || declare "$option=NA"
done

# In case relative paths were provided... extract full paths
CONTAINER=$(realpath ${CONTAINER})
WD=$(realpath ${WD})
HIFI=$(realpath ${HIFI})
HIC_R1=$(realpath ${HIC_R1})
HIC_R2=$(realpath ${HIC_R2})

if [ "$RUNTIME" = "conda" ]; then
    ${PUZZLER}=""  # No runtime needed for Conda
else
    # On some cluster architecture, you need to specify which directories to bind.... we will simply bind all paths. 
    binds=()

    for varname in CONTAINER WD HIFI HIC_R1 HIC_R2 REFERENCE BLOB_DB BUSCO_DB; do
        val="${!varname}"
        if [[ -n "$val" && ( -e "$val" || -d "$val" ) ]]; then
            dir=$(realpath "$val" | xargs dirname)
            binds+=("$dir")
        fi
    done

    # deduplicate
    IFS=$'\n' read -r -d '' -a unique_binds < <(printf "%s\n" "${binds[@]}" | sort -u && printf '\0')

    bind_flags=()
    for b in "${unique_binds[@]}"; do
        bind_flags+=(--bind "$b:$b")
    done

    PUZZLER="${RUNTIME} exec ${bind_flags[@]} ${CONTAINER}"
fi

if [ "$NO_JUICE" = "TRUE" ]; then
    JUICE_PRINT="Skipping juicer, no manual curation (not recommended!)"
else
    JUICE_PRINT="Running juicer, script will stop after .hic files created"
fi

cat << "EOF"

=======================================================================
__________ ____ _______________________.____     _____________________ 
\______   \    |   \____    /\____    /|    |    \_   _____/\______   \
 |     ___/    |   / /     /   /     / |    |     |    __)_  |       _/
 |    |   |    |  / /     /_  /     /_ |    |___  |        \ |    |   \
 |____|   |______/ /_______ \/_______ \|_______ \/_______  / |____|_  /
                           \/        \/        \/        \/         \/ 
=======================================================================

EOF

core_avail=$(nproc)
mem_avail=$(awk '/MemAvailable/ {printf "%.1f GB\n", $2/1024/1024}' /proc/meminfo)

echo -e "=======================================================================\nParameters for sample: ${SAMPLE} \nRUNTIME: ${RUNTIME}\nCONTAINER: ${CONTAINER} \nWD: ${WD} \nHIFI: ${HIFI}\nHIC_R1: ${HIC_R1}\nHIC_R2: ${HIC_R2}\nNUMBER CHRS: ${NUM_CHRS}\nREFERENCE: ${REFERENCE}\nHOM_COV: ${HOM_COV}\nBLOB_DB: ${BLOB_DB}\nBUSCO_LINEAGE: ${BUSCO_LINEAGE}\nBUSCO_DB: ${BUSCO_DB}\nCores Requested: ${t}\nCores Available: ${core_avail}\nRAM Requested: ${MEM}\nMemory Available: ${mem_avail}\nPUZZLER command: ${PUZZLER}\n=======================================================================\n"

set -euo pipefail

echo -e "\e[43m~~~ Checking software availability, this will take about 1 minute ~~~\e[0m"

declare -A TOOL_CMDS=(
  [hifiasm]="hifiasm --version"
  [haphic]="haphic --version"
  [minimap2]="minimap2 --version"
  [bwa-mem2]="bwa-mem2 version"
  [samblaster]="samblaster --version"
  [samtools]="samtools --version"
  [yahs]="yahs --version"
  [mashmap]="mashmap --version"
  [juicer]="juicer pre --version"
  [yak]="yak version"
  [busco]="busco --version"
  [map_chrs]="map_chromosomes -h"
  [juicertools]="java -jar /opt/HapHiC/utils/juicer_tools.1.9.9_jcuda.0.8.jar pre --version"
)

for tool in "${!TOOL_CMDS[@]}"; do
  if ! ${PUZZLER} ${TOOL_CMDS[$tool]} > /dev/null 2>&1; then
    echo -e "\e[41m~~~ $tool not found, is runtime set and container exists? ~~~\e[0m"
    #exit 1
  fi
done

### MONITORING ###
exec 3>&2
trap 'echo -e "\n❌ \e[41mCommand failed in in $(pwd):\e[0m \"$BASH_COMMAND\" (line $LINENO)\n" >&2' ERR
SCRIPT_START_TIME=$SECONDS
elapsed() {
    local mins=$(( (SECONDS - SCRIPT_START_TIME) / 60 ))
    printf "[+%dm]" "$mins"
}
### END MONITORING ###

########## End checks #############

mkdir -p ${WD}/primary_asm/stats ${WD}/juicer_files ${WD}/${SAMPLE}/01_hifiasm ${WD}/${SAMPLE}/02_purge_dups ${WD}/${SAMPLE}/03_haphic ${WD}/${SAMPLE}/04_juicer ${WD}/${SAMPLE}/05_postjuicebox ${WD}/${SAMPLE}/06_realign_hic_hifi ${WD}/${SAMPLE}/07_busco_yak_blob ${BUSCO_DB}
if [ -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
    echo -e "\e[42m~~~ $(elapsed) Skipping assembly for ${SAMPLE}: ${WD}/primary_asm/${SAMPLE}.fa exists ~~~\e[0m"
else

    echo -e "\e[43m~~~ $(elapsed) Assembling genome for ${SAMPLE} ~~~\e[0m"
    echo -e "\e[43m~~~ $(elapsed) ${JUICE_PRINT} ~~~\e[0m"

    ##### HIFIASM: Generate Primary Assembly #####
    if [ -s "${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa" ] && [ -f "${WD}/${SAMPLE}/hifiasm.complete" ]; then
        echo -e "\e[42m~~~ $(elapsed) Skipping hifiasm for ${SAMPLE}: ${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa exists ~~~\e[0m"
    elif [ ! -s "${HIFI}" ]; then
        echo -e "\e[41m~~~ $(elapsed) Skipping hifiasm for ${SAMPLE}, missing input: ${HIFI} ~~~\e[0m"
        exit 1 
    elif [ -s "${HIC_R1}" ]; then
        echo -e "\e[43m~~~ $(elapsed) Starting hifiasm assembly for ${SAMPLE} ~~~\e[0m"
        cd "${WD}/${SAMPLE}/01_hifiasm"

        # Run hifiasm
        RUN_ASM="${PUZZLER} hifiasm --primary -t ${t} -o asm --h1 ${HIC_R1} --h2 ${HIC_R2} ${HIFI}"
        if [[ -z "$HOM_COV" || "$HOM_COV" == "NA" ]]; then
            RUN_ASM="$RUN_ASM --hom-cov ${HOM_COV}"
        fi
        $RUN_ASM 2> "${SAMPLE}.hifiasm.log"
        touch ${WD}/${SAMPLE}/hifiasm.complete
    else
        echo -e "\e[41m~~~ $(elapsed) Skipping hifiasm for ${SAMPLE}, missing input: ${HIC_R1} ~~~\e[0m"
        exit 1 
    fi

    ##### PURGE_DUPS: Purge duplicates based on sequence #####
    if [ -s "${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa" ] && [ -f "${WD}/${SAMPLE}/purge_dups.complete" ]; then
        echo -e "\e[42m~~~ $(elapsed) Skipping purge for ${SAMPLE}: ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa exists ~~~\e[0m"
    elif [ ! -s "${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa" ]; then
        echo -e "\e[41m~~~ $(elapsed) Skipping Purge_Dups for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa ~~~\e[0m"
        exit 1 
    else
        echo -e "\e[43m~~~ $(elapsed) Starting Purge_Dups for ${SAMPLE} ~~~\e[0m"
        cd ${WD}/${SAMPLE}/02_purge_dups
        #Ensure fastas have proper contig haplotype names 
        awk '/^S/{print ">"$2;print $3}' ${WD}/${SAMPLE}/01_hifiasm/asm.hic.p_ctg.gfa > pri.init.fa

        # Purge duplicates
        ${PUZZLER} split_fa pri.init.fa > pri.split.fa
        ${PUZZLER} minimap2 -t ${t} -xasm5 -DP pri.split.fa pri.split.fa 2> ${SAMPLE}.minimap.purge.log | gzip -c > pri.split.self.paf.gz
        ${PUZZLER} purge_dups -M1000 -E1000 pri.split.self.paf.gz > pri.dups.bed 2> ${SAMPLE}.purge.log

        # Check if pri.dups.bed is empty
        if [ ! -s pri.dups.bed ]; then
            echo -e "\e[42m~~~ $(elapsed) Skipping purge for ${SAMPLE}: no duplicates found! ~~~\e[0m"
            cp pri.split.fa p_ctg.purged.fa 
        else
            # Continue with purge process if duplicates exist
            ${PUZZLER} get_seqs pri.dups.bed pri.init.fa 2> "${SAMPLE}.getseqs.log"
            mv purged.fa p_ctg.purged.fa
        fi
        touch ${WD}/${SAMPLE}/purge_dups.complete
    fi

    ##### ALIGN HIC #####
    if [ -s "${WD}/${SAMPLE}/03_haphic/filtered.bam" ] && [ -f "${WD}/${SAMPLE}/align_hic.complete" ]; then
        echo -e "\e[42m~~~ $(elapsed) Skipping HiC alignment for ${SAMPLE}: ${WD}/${SAMPLE}/03_haphic/filtered.bam exists ~~~\e[0m"
    elif [ ! -s "${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa" ]; then
        echo -e "\e[41m~~~ $(elapsed) Skipping HiC alignment for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ~~~\e[0m"
        exit 1 
    else
        echo -e "\e[43m~~~ $(elapsed) Mapping HiC reads to ${SAMPLE} draft ~~~\e[0m" 
        cd ${WD}/${SAMPLE}/03_haphic
        # Index reference
        ${PUZZLER} bwa-mem2 index ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa > ${SAMPLE}.alignment.indexing.hic.log 2>&1

        # Align Hi-C reads
        { ${PUZZLER} bwa-mem2 mem -5SP -t ${t} ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ${HIC_R1} ${HIC_R2} | \
            ${PUZZLER} samblaster | \
            ${PUZZLER} samtools view - -@ ${t} -S -h -b -F 3340 | \
            ${PUZZLER} filter_bam - 1 --nm 3 --threads ${t} | \
            ${PUZZLER} samtools view - -b -@ ${t} -o filtered.bam; } > ${SAMPLE}.alignment.hic.log 2>&1
        touch ${WD}/${SAMPLE}/align_hic.complete
    fi

    ##### SCAFFOLDING #####
    if [ -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ] && [ -f "${WD}/${SAMPLE}/scaffolding.complete" ]; then
        echo -e "\e[42m~~~ $(elapsed) Skipping HapHiC for ${SAMPLE}: ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa exists ~~~\e[0m"
    elif [ ! -s "${WD}/${SAMPLE}/03_haphic/filtered.bam" ]; then
        echo -e "\e[41m~~~ $(elapsed) Skipping HapHiC for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/03_haphic/filtered.bam ~~~\e[0m"
        exit 1 
    elif [[ -z "$NUM_CHRS" || "$NUM_CHRS" == "NA" ]]; then
        echo -e "\e[41m~~~ $(elapsed) Skipping HapHiC for ${SAMPLE}, must specify chromosome number estimate or guess ~~~\e[0m"
        exit 1 
    else

        echo -e "\e[43m~~~ $(elapsed) Running HapHiC for ${SAMPLE}  ~~~\e[0m" 
        mkdir -p ${WD}/${SAMPLE}/03_haphic/haphic
        set +euo pipefail
        # Clean up any previous runs, otherwise fails ... 
        rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*

        cd ${WD}/${SAMPLE}/03_haphic/haphic/
        ${PUZZLER} haphic pipeline ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ../filtered.bam ${NUM_CHRS} --correct_nrounds 2 --max_inflation 10.0 --threads ${t} --processes ${t} 2> ../${SAMPLE}.haphic.log
        cp ${WD}/${SAMPLE}/03_haphic/haphic/01.cluster/HapHiC_cluster.log ${WD}/${SAMPLE}/03_haphic/${SAMPLE}.haphic.cluster_WOULD_CONTAIN_ERRORS.log

        # IF HapHic failed with the specified number of chromosomes $NUM_CHRS, then loop from NUM_CHRS - 1, NUM_CHRS - 2, until successful 
        if [ ! -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ]; then
        rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*

        # Define range of chrs to test: Within 4 of NUM_CHRS
        START=$(( NUM_CHRS - 4 ))
        END=$(( NUM_CHRS + 4 ))

        # Prevent negative starting values (if NUM_CHRS < 4)
        if (( START < 1 )); then
            START=1
        fi

        # Loop through values within 4 of NUM_CHRS
        for (( CHR_ATTEMPT=START; CHR_ATTEMPT<=END; CHR_ATTEMPT++ )); do

            echo -e "\e[43m~~~ $(elapsed) HapHiC for ${SAMPLE} with ${NUM_CHRS} chrs failed, trying: ${CHR_ATTEMPT} ~~~\e[0m"
            mkdir -p ${WD}/${SAMPLE}/03_haphic/haphic
            cd ${WD}/${SAMPLE}/03_haphic/haphic
            
            ${PUZZLER} haphic pipeline ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa ../filtered.bam ${CHR_ATTEMPT} --correct_nrounds 2 --max_inflation 10.0 --threads ${t} --processes ${t} 2> ../${SAMPLE}.haphic_N_chrs${CHR_ATTEMPT}.log

            # Check if scaffolds.fa exists
            if [ -s ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa ]; then
                echo -e "\e[43m~~~ $(elapsed)  HapHiC completed successfully with NUM_CHRS=${CHR_ATTEMPT} ~~~\e[0m"
                break
            else
                rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*
            fi
        done

        fi 

        # IF this still failed, then just scaffold with YAHS 
        if [ ! -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ]; then

            echo -e "\e[43m~~~ $(elapsed) HapHiC for ${SAMPLE} failed, scaffolding with YAHS instead ~~~\e[0m"
            cd ${WD}/${SAMPLE}/03_haphic
            rm -rf ${WD}/${SAMPLE}/03_haphic/haphic/*
            mkdir -p ${WD}/${SAMPLE}/03_haphic/haphic/04.build

            ${PUZZLER} samtools faidx ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa
            ${PUZZLER} yahs ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa filtered.bam > yahs.log 2>&1
            cp ${WD}/${SAMPLE}/03_haphic/yahs.out_scaffolds_final.fa ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa
            cp ${WD}/${SAMPLE}/03_haphic/yahs.out_scaffolds_final.agp ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.raw.agp
        fi 
        touch ${WD}/${SAMPLE}/scaffolding.complete
        set -euo pipefail
    fi

    # If the scaffolds.fa file is missing, stop! 
    if [ ! -s "${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa" ]; then
        echo -e "\e[41m~~~ $(elapsed) Skipping juicer / renaming for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa ~~~\e[0m"
        exit 1

    ##### IF --no_juice, SKIP JUICER!!! #####
    elif [ "$NO_JUICE" = "TRUE" ] && [ "${REFERENCE}" = "NA" ]; then

        # If reference is also missing, you're done! 
        echo -e "\e[43m~~~ $(elapsed) Skipping juicer HiC file creation for ${SAMPLE}: --no_juice given, not recommended! ~~~\e[0m"
        echo -e "\e[43m~~~ $(elapsed) No reference provided for ${SAMPLE}: simply extracting assembly to: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
        cp ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa ${WD}/primary_asm/${SAMPLE}.fa
        touch ${WD}/${SAMPLE}/juicer.complete

    elif [ "$NO_JUICE" = "TRUE" ] && [ "${REFERENCE}" != "NA" ]; then

        # If reference, do the same as if it's been juiced
        echo -e "\e[43m~~~ $(elapsed) Skipping juicer HiC file creation for ${SAMPLE}: --no_juice given, not recommended! ~~~\e[0m"
        cp ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa ${WD}/${SAMPLE}/05_postjuicebox/post_juicer_asm.fa
        touch ${WD}/${SAMPLE}/juicer.complete

    elif [ -s "${WD}/juicer_files/${SAMPLE}_JBAT.hic" ] && [ -f "${WD}/${SAMPLE}/juicer.complete" ]; then
        echo -e "\e[42m~~~ $(elapsed) Skipping juicer HiC file creation for ${SAMPLE}: ${WD}/juicer_files/${SAMPLE}_JBAT.hic exists ~~~\e[0m"

    else 
        
        ##### Now that checks are in place, RUN JUICER! #####
        echo -e "\e[43m~~~ $(elapsed) Creating .hic file for juicebox for ${SAMPLE} ~~~\e[0m"
        cd ${WD}/${SAMPLE}/04_juicer

        # Orient chromosomes according to a related reference
        if [ -s "${WD}/${SAMPLE}/04_juicer/alignment.agp" ]; then 
            echo -e "\e[42m~~~ $(elapsed) Skipping initial alignment between reference and draft, ${WD}/${SAMPLE}/04_juicer/alignment.agp exists ~~~\e[0m]"
        elif [ "${REFERENCE}" != "NA" ] && [ ! -s "${WD}/${SAMPLE}/04_juicer/asm_to_ref.paf" ]; then

            ${PUZZLER} mashmap -r ${REFERENCE} -q ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa -t ${t} -s 10000 --perc_identity 85 -o asm_to_ref.paf 2> mashmap.ref.log
            ${PUZZLER} haphic refsort ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.raw.agp asm_to_ref.paf > alignment.agp 2> refsort.log

        else
            cp ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.raw.agp alignment.agp
        fi

        # Otherwise, proceed as usual 
        ${PUZZLER} samtools faidx ${WD}/${SAMPLE}/03_haphic/haphic/04.build/scaffolds.fa
        ${PUZZLER} samtools faidx ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa
        
        ${PUZZLER} juicer pre \
            -a -q 1 \
            -o haphic_JBAT \
            ${WD}/${SAMPLE}/03_haphic/filtered.bam \
            alignment.agp \
            ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa.fai > haphic_JBAT.log 2>&1
        grep PRE_C_SIZE haphic_JBAT.log | \
            awk '{print $2" "$3}' > chrom.sizes
        ${PUZZLER} java -Xmx${MEM}G -jar /opt/HapHiC/utils/juicer_tools.1.9.9_jcuda.0.8.jar pre \
            -r 5000000,4000000,3000000,2000000,1500000,1000000,750000,500000,250000,100000,50000 \
            haphic_JBAT.txt \
            haphic_JBAT.hic \
            chrom.sizes > juicer_pre.log 2>&1
            
        cp haphic_JBAT.hic ${WD}/juicer_files/${SAMPLE}_JBAT.hic
        cp haphic_JBAT.assembly ${WD}/juicer_files/${SAMPLE}_JBAT.assembly
        touch ${WD}/${SAMPLE}/juicer.complete

    fi 

    ##### Extract post juicebox assembly
    if [ "$NO_JUICE" = "TRUE" ]; then
        echo -e "\e[42m~~~ $(elapsed) Skipping juicer extraction for ${SAMPLE}, --no_juice requested! (not recommended!) ~~~\e[0m"
    elif [ ! -s "${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly" ]; then
        echo -e "\e[41m~~~ $(elapsed) Post curation assembly file missing for ${SAMPLE}: Run Juicebox & place in ${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly ~~~\e[0m"
        exit 1 
    elif [ "${REFERENCE}" = "NA" ]; then

        # If juicebox review file exists, but no reference file, just extract that file for final assembly  
        echo -e "\e[43m~~~ $(elapsed) No reference provided for ${SAMPLE}: simply extracting assembly to: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
        cd ${WD}/${SAMPLE}/05_postjuicebox
        ${PUZZLER} juicer post \
            -o haphic-post_JBAT \
            ${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly \
            ${WD}/${SAMPLE}/04_juicer/haphic_JBAT.liftover.agp \
            ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa 2> ${SAMPLE}.juicer.post.log
        cp haphic-post_JBAT.FINAL.fa ${WD}/primary_asm/${SAMPLE}.fa

    else 

        # If juicebox review file exists and reference provided, get ready for chromosome naming 
        echo -e "\e[43m~~~ $(elapsed) Extracting post-curation assembly and mapping to reference for ${SAMPLE} ~~~\e[0m"
        cd ${WD}/${SAMPLE}/05_postjuicebox
        ${PUZZLER} juicer post \
            -o haphic-post_JBAT \
            ${WD}/juicer_files/${SAMPLE}_JBAT.review.assembly \
            ${WD}/${SAMPLE}/04_juicer/haphic_JBAT.liftover.agp \
            ${WD}/${SAMPLE}/02_purge_dups/p_ctg.purged.fa 2> ${SAMPLE}.juicer.post.log
        mv haphic-post_JBAT.FINAL.fa ${WD}/${SAMPLE}/05_postjuicebox/post_juicer_asm.fa
    fi 

    ##### CHROMOSOME RENAMING #####
    if [ "${REFERENCE}" = "NA" ]; then 
        echo -e "\e[43m~~~ $(elapsed) No reference provided for ${SAMPLE}: no chromosome re-naming, so final assembly already: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
    else

        # Create draft - reference map file 
        cd ${WD}/${SAMPLE}/05_postjuicebox
        if [ -s "${WD}/${SAMPLE}/05_postjuicebox/map.txt" ]; then
            echo -e "\e[42m~~~ $(elapsed) Skipping draft-reference mapping for ${SAMPLE}: ${WD}/${SAMPLE}/05_postjuicebox/map.txt exists ~~~\e[0m"
        elif [ ! -s "${WD}/${SAMPLE}/05_postjuicebox/post_juicer_asm.fa" ]; then
            echo -e "\e[41m~~~ $(elapsed) Skipping draft-reference mapping for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/05_postjuicebox/post_juicer_asm.fa ~~~\e[0m"
        else

            # Renaming: to reference chromosomes 
            ${PUZZLER} mashmap -r ${REFERENCE} -q post_juicer_asm.fa -t ${t} -s 10000 --perc_identity 85 -o asmpost_to_paf.paf 2> mashmap.postjuicer.log
            ${PUZZLER} samtools faidx post_juicer_asm.fa
            ${PUZZLER} samtools faidx ${REFERENCE}
            ${PUZZLER} map_chromosomes --paf asmpost_to_paf.paf --fai post_juicer_asm.fa.fai --out map.txt --min_size 0.1 &> mapping_renaming.log
        fi 

        # Renaming script 
        if [ -s "${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa" ]; then 
            echo -e "\e[42m~~~ $(elapsed) Skipping renaming chromosomes for ${SAMPLE}: renamed ${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa exists ~~~\e[0m"
        elif [ ! -s "${WD}/${SAMPLE}/05_postjuicebox/map.txt" ]; then
            echo -e "\e[41m~~~ $(elapsed) Skipping renaming chromosomes for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/05_postjuicebox/map.txt~~~\e[0m"
        else 
            echo -e "\e[43m~~~ $(elapsed) Renaming chromosomes for ${SAMPLE} ~~~\e[0m"
            
            cd ${WD}/${SAMPLE}/05_postjuicebox
            # This file has $haphic_scafID \t $ref_chr_ID \t $strand: ONLY WORKS IF THE SCAFFOLDS IN REF ARE NAMED E.G. >chr1 or >Chr1 
            awk '{OFS="\t"}{print $1, $2, $5, $3, $4}' map.txt | egrep 'chr|Chr' > chromosome_naming_map.txt 

            # Exclude those chromsomes from map, and then add e.g. scaf101405 for the remaining non-chromosome scaffolds 
            awk '{print $1}' chromosome_naming_map.txt > exclude_chr_scafIDs.txt
            grep -vwf exclude_chr_scafIDs.txt post_juicer_asm.fa.fai | awk '{OFS="\t"}{print $1, $1, "+"}' >> chromosome_naming_map.txt

            # Must be the same number of scaffolds
            if [ $(cat chromosome_naming_map.txt | wc -l) -eq $(cat post_juicer_asm.fa.fai | wc -l) ]; then
                echo -e "\e[43m~~~ $(elapsed) Scaffold sanity check passed for renaming, proceeding! ~~~\e[0m"
            else
                echo -e "\e[41m~~~ $(elapsed) Not same number of scaffolds, stop and inspect ${WD}/${SAMPLE}/05_postjuicebox/chromosome_naming_map.txt ~~~\e[0m"
                exit 1
            fi # exit scaffold check 

            # Orient chromosomes in the same strand direction 
            awk '{if ($3 == "-") print $1}' chromosome_naming_map.txt > reverse_list.txt
            awk '{if ($3 == "+") print $1}' chromosome_naming_map.txt > positive_list.txt
            ${PUZZLER} seqtk subseq post_juicer_asm.fa reverse_list.txt > to_revercomp.fa
            ${PUZZLER} seqtk subseq post_juicer_asm.fa positive_list.txt > positive.fa
            ${PUZZLER} seqkit seq --line-width 0 -t DNA -v -r -p to_revercomp.fa > revcomp.fa
            cat positive.fa revcomp.fa > orient.fa
            rm reverse_list.txt positive_list.txt to_revercomp.fa positive.fa revcomp.fa

            # Detect if there are duplicate scaffolds
            awk '{print $2}' chromosome_naming_map.txt | sort | uniq -d > duplicates.txt

            ##### THIS WILL DEAL WITH DUPLICATES, IN CASE THERE ARE 2 SCAFFOLDS CORRESPONDING TO A CHR! eg. Chr1A  
            if [ -s duplicates.txt ]; then
                
                echo -e "\e[41m~~~ $(elapsed) Multiple scaffolds corresponding to single Chr for ${SAMPLE}, Renaming them e.g. Chr1A, Chr1B.. ~~~\e[0m"
                awk '
                {
                    chr=$2
                    len=$5
                    data[chr][len] = $0  # full line indexed by chromosome and length
                    lengths[chr][len] = len  # track lengths for sorting
                    count[chr]++  # Count duplicate chromosome
                }
                END {
                    # Sort by chromosome name numerically, then by length descending
                    PROCINFO["sorted_in"] = "@ind_num_asc"
                    for (chr in data) {
                        n = 0
                        asorti(lengths[chr], sorted_lengths, "@val_num_desc")  # sort in descending order
                        for (i in sorted_lengths) {
                            label = (n == 0) ? chr : chr sprintf("%c", 65 + n - 1)  # Assign e.g. A, B, C labels
                            split(data[chr][sorted_lengths[i]], line, "\t")  # grab full line
                            line[2] = label  # Update chromosome name
                            print line[1], line[2], line[3], line[4], line[5]
                            n++
                        }
                    }
                }
                ' OFS='\t' chromosome_naming_map.txt > chromosome_renamed_map.txt
                cp chromosome_naming_map.txt chromosome_naming_map.ORIGINAL.txt
                mv chromosome_renamed_map.txt chromosome_naming_map.txt
                
            else 

                echo -e "\e[43m~~~ $(elapsed) Single scaffolds corresponding to a single Chr for ${SAMPLE} ~~~\e[0m"
            fi # Exit duplicate scaffold check 

            # Finally, rename the chromosomes
            awk '$2 ~ /^chr/ {print $0}' chromosome_naming_map.txt | sort -k2,2V | awk '{print $2}' > sorted_chr.txt
            awk '$2 ~ /^scaffold_/ {print $0}' chromosome_naming_map.txt | sort -k2,2V | awk '{print $2}' >> sorted_chr.txt

            ${PUZZLER} seqkit replace --line-width 0 -p "(.*)" -r "{kv}" -k chromosome_naming_map.txt orient.fa > haphic_renamed_unord.fa 2> seqkit_renaming.log
            ${PUZZLER} samtools faidx haphic_renamed_unord.fa
            xargs ${PUZZLER} samtools faidx haphic_renamed_unord.fa < sorted_chr.txt > final_asm.fa
            cp ${WD}/${SAMPLE}/05_postjuicebox/final_asm.fa ${WD}/primary_asm/${SAMPLE}.fa
            ${PUZZLER} samtools faidx ${WD}/primary_asm/${SAMPLE}.fa

        fi # exit renaming check 

    fi # exit loop check if renaming needs to be done...

fi # exit assembly creation loop, if assembly exists - just skip to quality checks 

##################################################
###### OPTIONAL: ASSEMBLY QUALITY CHECKS!!! ######
##################################################

echo -e "\e[43m~~~ $(elapsed) Assessing genome quality for ${SAMPLE} ~~~\e[0m"

###### Final HIC mapping ##### 
if [ -s "${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam" ] && [ -f "${WD}/${SAMPLE}/qc_align_hic.complete" ]; then
    echo -e "\e[42m~~~ $(elapsed) Skipping alignment for final HiC map ${SAMPLE}: ${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam exists ~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping alignment for final HiC map ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
else 
    echo -e "\e[43m~~~ $(elapsed) Creating final HiC bam for ${SAMPLE} ~~~\e[0m"
    cd ${WD}/${SAMPLE}/06_realign_hic_hifi

    ln -s ${WD}/primary_asm/${SAMPLE}.fa final_asm.fa 2>/dev/null || true
    if [ ! -s "final_asm.fa.0123" ]; then 
		${PUZZLER} bwa-mem2 index final_asm.fa > alignment.indexing.final_hic.log 2>&1
		${PUZZLER} samtools faidx final_asm.fa
	fi

    # Align Hi-C reads
    { ${PUZZLER} bwa-mem2 mem -5SP -t ${t} final_asm.fa ${HIC_R1} ${HIC_R2} | \
        ${PUZZLER} samblaster | \
        ${PUZZLER} samtools view - -@ ${t} -S -h -b -F 3340 | \
        ${PUZZLER} filter_bam - 1 --nm 3 --threads ${t} --remove-dup | \
        ${PUZZLER} samtools view - -b -@ ${t} -o final_asm.filtered.bam; } > alignment.final_hic.log 2>&1
    touch ${WD}/${SAMPLE}/qc_align_hic.complete

fi # exit final hic mapping check 

##### Final HIC Plotting ##### 
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.HiC_contacts.pdf" ]; then
    echo -e "\e[42m~~~ $(elapsed) Skipping final contact map generating for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.pdf exists ~~~\e[0m"
elif [ ! -s "${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping final contact map generating for ${SAMPLE}, missing input: ${WD}/${SAMPLE}/06_realign_hic_hifi/final_asm.filtered.bam ~~~\e[0m"
else 
    cd ${WD}/${SAMPLE}/06_realign_hic_hifi
    ${PUZZLER} samtools faidx final_asm.fa
    ${PUZZLER} mock_agp_file.py final_asm.fa > final_asm.agp
	if [ "${REFERENCE}" = "NA" ]; then
	    echo -e "\e[43m~~~ $(elapsed) Creating final contact map for ${SAMPLE}, no ref specified, plotting scaffolds > 2mb ~~~\e[0m"
		${PUZZLER} haphic plot --threads ${t} final_asm.agp final_asm.filtered.bam --bin_size 1000 2> haphic_plot.log
    else
	    echo -e "\e[43m~~~ $(elapsed) Creating final contact map for ${SAMPLE}, plotting named chromosomes ~~~\e[0m"
		CHRS=$(egrep 'chr|Chr' final_asm.fa.fai | egrep -v 'SUPER|unloc' | cut -f1 | tr '\n' ',' | sed 's/,$//g')
		${PUZZLER} haphic plot --threads ${t} final_asm.agp final_asm.filtered.bam --bin_size 1000 --specified_scaffolds ${CHRS} 2> haphic_plot.log
	fi 

    # Copy over HiC map 
    cp ${WD}/${SAMPLE}/06_realign_hic_hifi/contact_map.pdf ${WD}/primary_asm/stats/${SAMPLE}.HiC_contacts.pdf
fi # exit final hic plotting check 

##### YAK k-mer QV ##### 
if [ -s "${WD}/${SAMPLE}/07_busco_yak_blob/sr.qv.txt" ] && [ -f "${WD}/${SAMPLE}/yak.complete" ]; then
    echo -e "\e[42m~~~ $(elapsed) Skipping YAK k-mer QV for ${SAMPLE}: ${WD}/${SAMPLE}/07_busco_yak_blob/sr.qv.txt exists ~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping YAK k-mer QV for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
elif [ ! -s "${HIFI}" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping YAK k-mer QV stats for ${SAMPLE}, missing input: ${HIFI} ~~~\e[0m"
else 
    echo -e "\e[43m~~~ $(elapsed) Running YAK on ${SAMPLE} ~~~\e[0m"
    cd ${WD}/${SAMPLE}/07_busco_yak_blob

    ${PUZZLER} yak count -b37 -t ${t} -o ccs.yak ${HIFI} > yak.count.log 2>&1
    ${PUZZLER} yak qv -t ${t} -p -K3.2g -l100k ccs.yak ${WD}/primary_asm/${SAMPLE}.fa > sr.qv.txt 2> yak.qv.log
    touch ${WD}/${SAMPLE}/yak.complete
fi

###### BUSCO ######
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.busco.txt" ] && [ -f "${WD}/${SAMPLE}/busco.complete" ]; then
    echo -e "\e[42m~~~ $(elapsed) Skipping BUSCO for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.busco.txt exists ~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping BUSCO for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
elif [[ "${BUSCO_LINEAGE}" == "NA" || "${BUSCO_DB}" == "NA" ]]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping BUSCO for ${SAMPLE}, not requested ~~~\e[0m"
else 

    # Create a busco download lock in case multiple runs of the same species 
    B_LOCK_FILE="${BUSCO_DB}/${BUSCO_LINEAGE}.lock"
    export PYTHONWARNINGS="ignore::SyntaxWarning"

    if [ ! -d "${BUSCO_DB}/lineages/${BUSCO_LINEAGE}" ] && [ ! -f "${BUSCO_DB}/${BUSCO_LINEAGE}.lock" ]; then

        cd ${BUSCO_DB}/../
        touch ${B_LOCK_FILE} 
        echo -e "\e[43m~~~ $(elapsed) Downloading BUSCO Lineage database: ${BUSCO_DB}/lineages/${BUSCO_LINEAGE} ~~~\e[0m"
        ${PUZZLER} busco --download ${BUSCO_LINEAGE} --download_path ${BUSCO_DB} > ${BUSCO_DB}/${BUSCO_LINEAGE}_busco_download.log 2>&1
        rm ${B_LOCK_FILE}

    elif [ ! -d "${BUSCO_DB}/lineages/${BUSCO_LINEAGE}" ] && [ -f "${BUSCO_DB}/${BUSCO_LINEAGE}.lock" ]; then
        echo -e "\e[41m~~~ $(elapsed) Another instance already dl-ing busco db. Resubmit ${puzzler} after finished or remove ${BUSCO_DB}/${BUSCO_LINEAGE}.lock ~~~\e[0m"
        exit 1 
    else
        echo -e "\e[42m~~~ $(elapsed) BUSCO lineage dataset already exists, skipping ~~~\e[0m"
    fi

    echo -e "\e[43m~~~ $(elapsed) Running BUSCO for ${SAMPLE} using lineage: ${BUSCO_LINEAGE} ~~~\e[0m"

    cd ${WD}/${SAMPLE}/07_busco_yak_blob
    ${PUZZLER} busco -i ${WD}/primary_asm/${SAMPLE}.fa \
        -l ${BUSCO_DB}/lineages/${BUSCO_LINEAGE} \
        -m genome \
        -c ${t} \
        -o ${SAMPLE} \
        -f \
        --offline > busco.log 2>&1

    cp ${WD}/${SAMPLE}/07_busco_yak_blob/${SAMPLE}/short_summary.specific*.txt ${WD}/primary_asm/stats/${SAMPLE}.busco.txt
    touch ${WD}/${SAMPLE}/busco.complete
fi

##### Blobtools contamination search ##### 
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.blob.stats.txt" ]; then 
    echo -e "\e[42m~~~ $(elapsed) Skipping blobtools for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.stats.txt exists ~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping blobtools for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
elif [ ! -s "${HIFI}" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping blobtools for ${SAMPLE}, missing input: ${HIFI} ~~~\e[0m"
elif [ "${BLOB_DB}" = "NA" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping blobtools for ${SAMPLE}, not desired ~~~\e[0m"
else 
    echo -e "\e[43m~~~ $(elapsed) Running blobtools on ${SAMPLE} ~~~\e[0m"

    ##### Map HiFi Reads back to Assembly ##### 
    if [ -s "${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam" ] && [ -f "${WD}/${SAMPLE}/qc_align_hifi.complete" ]; then
        echo -e "\e[42m~~~ $(elapsed) Skipping HiFi alignment for ${SAMPLE}: ${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam exists ~~~\e[0m"
    else 
        cd ${WD}/${SAMPLE}/06_realign_hic_hifi

        # Alignment 
        echo -e "\e[43m~~~ $(elapsed) Blobtools need HiFi alignment, starting HiFi Alignment for ${SAMPLE} ~~~\e[0m"
        { ${PUZZLER} minimap2 -t ${t} -ax map-hifi \
            ${WD}/primary_asm/${SAMPLE}.fa ${HIFI} 2> ${SAMPLE}.hifi.minimap.log | \
            ${PUZZLER} samtools sort --threads ${t} -o asm.hifi.bam; } > hifi.alignment.log 2>&1
        ${PUZZLER} samtools index -c --threads ${t} asm.hifi.bam
        touch ${WD}/${SAMPLE}/qc_align_hifi.complete
        
    fi # exit HiFi check

    LOCK_FILE="${BLOB_DB}/download_taxdump.lock"

    #### Download Refseq Taxdump (small!)
    if [ -f "$LOCK_FILE" ]; then
        echo -e "\e[41m~~~ $(elapsed) Another instance already dl-ing taxdump db. Resubmit ${puzzler} when finished, or rm $LOCK_FILE! Exiting ~~~\e[0m"
        exit 1
    elif [ ! -s "${BLOB_DB}/data/nodes.dmp" ] && [ ! -s "${BLOB_DB}/data/nodesDB.txt" ]; then
        echo -e "\e[43m~~~ $(elapsed) Grabbing NCBI taxdump files ~~~\e[0m"
        cd ${BLOB_DB}
        mkdir -p data out
        # Create lock file to signal database download in progress
        touch "$LOCK_FILE"
        wget https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz -P data/ > ncbi_dump.wget.log 2>&1
        #wget ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz -P data/ > ncbi_dump.wget.log 2>&1 # You can also try this if the above fails....
        tar zxf data/taxdump.tar.gz -C data/ nodes.dmp names.dmp > ncbi_dump.tar.log 2>&1
        rm -f "$LOCK_FILE"
    else
        echo -e "\e[42m~~~ $(elapsed) Skipping NCBI taxdump, ${BLOB_DB}/data/nodes.dmp exists ~~~\e[0m"
    fi 

    #### Download refseq nt databases (MASSIVE!) 
    mkdir -p ${BLOB_DB}/nt
    cd ${BLOB_DB}/nt
    
    NT_LOCK_FILE="${BLOB_DB}/download_nt.lock"

    # Capture output and errors
    if [ -f "${BLOB_DB}/nt.complete" ]; then
        echo -e "\e[42m~~~ $(elapsed) Refseq nt database appears okay. ${BLOB_DB}/nt/nt.ndb exists ~~~\e[0m"
    elif [ -f "$NT_LOCK_FILE" ]; then
        echo -e "\e[41m~~~ $(elapsed) Another instance already dl-ing nt db. Resubmit ${puzzler} when finished, or rm $NT_LOCK_FILE! Exiting ~~~\e[0m"
        exit 1 
    elif [ ! -f "$NT_LOCK_FILE" ]; then
        echo -e "\e[43m~~~ $(elapsed) Checking/Downloading RefSeq nt database.... will take hours if non-existent ~~~\e[0m"
        touch "$NT_LOCK_FILE"
        ${PUZZLER} update_blastdb.pl --force_ftp --num_threads ${t} --decompress nt > nt_check_database.log 2>&1
        
        # If there's an error with the script, stop! 
        if grep -i "not found\|error" nt_check_database.log; then
            echo -e "\e[41m~~~ $(elapsed) Error detected during BLAST database update! Check running ${PUZZLER} update_blastdb.pl in ${BLOB_DB}  ~~~\e[0m"
            exit 1
        fi

        # Otherwise, database is ready, so remove the lock file 
        echo -e "\e[43m~~~ $(elapsed) RefSeq nt database exists successfully ~~~\e[0m"
        rm "$NT_LOCK_FILE"
        touch ${BLOB_DB}/nt.complete
    else
        echo -e "\e[42m~~~ $(elapsed) Error detected during BLAST database update! Check running ${PUZZLER} update_blastdb.pl in ${BLOB_DB} or rm ${BLOB_DB}/download_nt.lock~~~\e[0m"
    fi 

    cd ${WD}/${SAMPLE}/07_busco_yak_blob
    if [ -s "${SAMPLE}_blast.out" ] && [ -f "${WD}/${SAMPLE}/blastn.complete" ]; then
            echo -e "\e[42m~~~ $(elapsed) Skipping blast, ${WD}/${SAMPLE}/07_busco_yak_blob/blast.out exists ~~~\e[0m"
    else
        echo -e "\e[43m~~~ $(elapsed) Blasting ${SAMPLE} against nt... will take hours and huge RAM ~~~\e[0m"
        ${PUZZLER} blastn -task megablast \
            -db ${BLOB_DB}/nt/nt \
            -query ${WD}/primary_asm/${SAMPLE}.fa \
            -outfmt "6 qseqid staxids bitscore std" \
            -max_target_seqs 10 \
            -max_hsps 1 \
            -evalue 1e-25 \
            -num_threads ${t} \
            -out blast.out > blast.log 2>&1
        touch ${WD}/${SAMPLE}/blastn.complete
    fi 

    cd ${WD}/${SAMPLE}/07_busco_yak_blob
    if [ ! -s "blast.out" ] && [ ! -s "${WD}/${SAMPLE}/blastn.complete" ]; then
        echo -e "\e[41m~~~ $(elapsed) Blast file is empty for ${SAMPLE}, check ${WD}/${SAMPLE}/07_busco_yak_blob/blast.log ~~~\e[0m"
        exit 1 
    elif [ ! -s "${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam" ]; then
	     echo -e "\e[41m~~~ $(elapsed) Alignment file missing for ${SAMPLE}, check ${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam ~~~\e[0m"
    elif [ -s "${BLOB_DB}/data/nodesDB.txt" ]; then

        echo -e "\e[43m~~~ $(elapsed) Creating blobplot for ${SAMPLE} ~~~\e[0m"  
        { ${PUZZLER} blobtools create -i ${WD}/primary_asm/${SAMPLE}.fa -b ${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam -t blast.out \
            --db ${BLOB_DB}/data/nodesDB.txt -o ${SAMPLE} && \
            ${PUZZLER} blobtools view -i ${SAMPLE}.blobDB.json && \
            ${PUZZLER} blobtools plot -i ${SAMPLE}.blobDB.json --format pdf; } > blob.log 2>&1
        cp ${SAMPLE}*blobplot.bam0.pdf ${WD}/primary_asm/stats/${SAMPLE}.blob.pdf
        cp ${SAMPLE}.*blobplot.stats.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.stats.txt
        cp ${SAMPLE}.*table.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.contaminants.txt

    elif [ ! -s "${BLOB_DB}/data/nodesDB.txt" ]; then 

        echo -e "\e[43m~~~ $(elapsed) Creating blobplot for ${SAMPLE} ~~~\e[0m"
        { ${PUZZLER} blobtools create -i ${WD}/primary_asm/${SAMPLE}.fa -b ${WD}/${SAMPLE}/06_realign_hic_hifi/asm.hifi.bam -t blast.out \
            --nodes ${BLOB_DB}/data/nodes.dmp --names ${BLOB_DB}/data/names.dmp --db ${BLOB_DB}/data/nodesDB.txt -o ${SAMPLE} && \
            ${PUZZLER} blobtools view -i ${SAMPLE}.blobDB.json && \
            ${PUZZLER} blobtools plot -i ${SAMPLE}.blobDB.json --format pdf; } > blob.log 2>&1
        cp ${SAMPLE}*blobplot.bam0.pdf ${WD}/primary_asm/stats/${SAMPLE}.blob.pdf
        cp ${SAMPLE}.*blobplot.stats.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.stats.txt
        cp ${SAMPLE}.*table.txt ${WD}/primary_asm/stats/${SAMPLE}.blob.contaminants.txt

    else
        echo -e "\e[42m~~~ $(elapsed) Skipping blobtools, ${BLOB_DB}/data/nodesDB.txt is missing ~~~\e[0m"
    fi 
fi

##### Basic Assembly Stats ##### 
if [ -s "${WD}/primary_asm/stats/${SAMPLE}.summary.txt" ]; then 
    echo -e "\e[42m~~~ $(elapsed) Skipping final assembly stats for ${SAMPLE}: ${WD}/primary_asm/stats/${SAMPLE}.summary.txt exists ~~~\e[0m"
elif [ ! -s "${WD}/primary_asm/${SAMPLE}.fa" ]; then
    echo -e "\e[41m~~~ $(elapsed) Skipping final assembly stats for ${SAMPLE}, missing input: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
else 

    echo -e "\e[43m~~~ $(elapsed) Summarizing Assembly for ${SAMPLE} ~~~\e[0m"
    # Get metrics for final assembly

    FINAL_STATS=$(${PUZZLER} assembly_stats ${WD}/primary_asm/${SAMPLE}.fa)
    SIZE=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'total_bps' | tail -n1 | sed 's/,//g')
    SEQS=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'sequence' | tail -n1 | sed 's/,//g')
    CTGS=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'sequence' | head -n2 | tail -n1 | sed 's/,//g')
    SCAF_N50=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'N50' | tail -n1 | sed 's/,//g')
    CONT_N50=$(echo "$FINAL_STATS" | tr ':' '\n' | grep -A 1 'N50' | head -n2 | tail -n1 | sed 's/,//g')
    GAPS=$((CTGS - SEQS))

    YAK_CV=$(awk '$1 == "CV"' ${WD}/${SAMPLE}/07_busco_yak_blob/sr.qv.txt | cut -f2)
    YAK_QV=$(awk '$1 == "QV"' ${WD}/${SAMPLE}/07_busco_yak_blob/sr.qv.txt | cut -f2)

    HEADER="Sample\tSizeBP\tSequences\tContigs\tGaps\tContigN50\tScafN50\tYAK_CV\tYAK_QV"
    VALUES="${SAMPLE}\t$SIZE\t$SEQS\t$CTGS\t$GAPS\t$CONT_N50\t$SCAF_N50\t$YAK_CV\t$YAK_QV"

    # Add chromosome-specific stats for reference-assigned assemblies. This will remove e.g. chr1_SUPER_Unloc scaffolds! (Just remove the "grep -v 'SUPER' if you want those...")
    if [ "${REFERENCE}" != "NA" ]; then
        cd ${WD}/${SAMPLE}
        ${PUZZLER} samtools faidx ${WD}/primary_asm/${SAMPLE}.fa
        egrep 'chr|Chr' ${WD}/primary_asm/${SAMPLE}.fa.fai | awk '$1 !~ /A/' | egrep -v 'SUPER|unloc|A|B|C|D' | cut -f1 > ${SAMPLE}.chrs
        ${PUZZLER} samtools faidx ${WD}/primary_asm/${SAMPLE}.fa -r ${SAMPLE}.chrs > ${SAMPLE}.chr.fa
        CHR_STATS=$(${PUZZLER} assembly_stats ${SAMPLE}.chr.fa)
        CHR_SIZE=$(echo "$CHR_STATS" | tr ':' '\n' | grep -A 1 'total_bps' | tail -n1 | sed 's/,//g')
        CHR_PROP=$(${PUZZLER} perl -e "print sprintf('%.4f', $CHR_SIZE / $SIZE)")
        CHR_SEQS=$(echo "$CHR_STATS" | tr ':' '\n' | grep -A 1 'sequence' | tail -n1 | sed 's/,//g')
        CHR_CTGS=$(echo "$CHR_STATS" | tr ':' '\n' | grep -A 1 'sequence' | head -n2 | tail -n1 | sed 's/,//g')
        CHR_GAPS=$((CHR_CTGS - CHR_SEQS))

        HEADER+="\tWithinChrsBP\tPropWithinChrs\tGapsInChrs"
        VALUES+="\t$CHR_SIZE\t$CHR_PROP\t$CHR_GAPS"

        rm ${SAMPLE}.chrs
        rm ${SAMPLE}.chr.fa
    fi 

    # Add BUSCO metrics **only if BUSCO_LINEAGE is not "NA"**
    if [ "$BUSCO_LINEAGE" != "NA" ]; then
        # Parse BUSCO results
        BUSCO_COMPLETE=$(grep "C:" ${WD}/primary_asm/stats/${SAMPLE}.busco.txt | cut -d'[' -f1 | cut -d':' -f2 | cut -d'%' -f1)
        BUSCO_SINGLE=$(grep "C:" ${WD}/primary_asm/stats/${SAMPLE}.busco.txt | cut -d'[' -f2 | cut -d'%' -f1 | sed 's/S://g')

        HEADER+="\tBUSCO_Complete\tBUSCO_singlecopy"
        VALUES+="\t$BUSCO_COMPLETE\t$BUSCO_SINGLE"
    fi

    # Write to summary file
    echo -e "$HEADER" > ${WD}/primary_asm/stats/${SAMPLE}.summary.txt
    echo -e "$VALUES" >> ${WD}/primary_asm/stats/${SAMPLE}.summary.txt

fi # exit assembly stat check

echo -e "\e[46m~~~ $(elapsed) Your final assembly for ${SAMPLE} is: ${WD}/primary_asm/${SAMPLE}.fa ~~~\e[0m"
echo -e "\e[46m~~~ $(elapsed) Your final assembly stats for ${SAMPLE} are in: ${WD}/primary_asm/stats/${SAMPLE}.summary.txt ~~~\e[0m"
