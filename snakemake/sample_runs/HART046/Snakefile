# Snakefile
def get_hap_files(wildcards):
    ploidy = config["samples"][wildcards.sample]["ploidy"]
    prefix = "hic." if has_hic(wildcards) else ""
    return expand(
        config["workdir"] + f"/{{sample}}/HiCHiFi/{{sample}}.{prefix}hap{{n}}.p_ctg.gfa",
        sample=wildcards.sample,
        n=range(1, int(ploidy) + 1)
    )

def has_hic(wildcards):
    return config["samples"][wildcards.sample]["hic_r1"] != "" and \
           config["samples"][wildcards.sample]["hic_r2"] != ""

rule all:
    input:
        expand("Primary_Assemblies/{sample}.HifiasmHiFi-HiC-PurgeDups-RagTag.fa", sample=config["samples"].keys()),
        expand("Primary_Assemblies/busco/{sample}/short_summary.specific.embryophyta_odb10.{sample}.txt", sample=config["samples"].keys()),
        expand("Primary_Assemblies/haplotypes/{sample}.hap{n}.purged.fa", 
               sample=config["samples"].keys(),
               n=lambda wildcards: range(1, int(config["samples"][wildcards.sample]["ploidy"]) + 1))

rule hifiasm:
    input:
        hifi = lambda wildcards: config["samples"][wildcards.sample]["hifi"]
    output:
        gfa = config["workdir"] + "/{sample}/HiCHiFi/{sample}.p_ctg.gfa"
    params:
        ploidy = lambda wildcards: config["samples"][wildcards.sample]["ploidy"],
        outprefix = config["workdir"] + "/{sample}/HiCHiFi/{sample}"
    threads: 64
    singularity: config["container"]
    shell:
        """
        echo "~~~~ Starting HiFiasm Assembly for {wildcards.sample} ~~~~"
        hifiasm --n-hap {params.ploidy} -s 0.9 -t {threads} \
            -o {params.outprefix} {input.hifi}
        echo "~~~~ HiFiasm Assembly Complete ~~~~"
        """

rule hifiasm_hic:
    input:
        hifi = lambda wildcards: config["samples"][wildcards.sample]["hifi"],
        hic_r1 = lambda wildcards: config["samples"][wildcards.sample]["hic_r1"],
        hic_r2 = lambda wildcards: config["samples"][wildcards.sample]["hic_r2"]
    output:
        gfa = config["workdir"] + "/{sample}/HiCHiFi/{sample}.hic.p_ctg.gfa"
    params:
        ploidy = lambda wildcards: config["samples"][wildcards.sample]["ploidy"],
        outprefix = config["workdir"] + "/{sample}/HiCHiFi/{sample}"
    threads: 64
    singularity: config["container"]
    shell:
        """
        echo "~~~~ Starting HiFiasm-HiC Assembly for {wildcards.sample} ~~~~"
        hifiasm --n-hap {params.ploidy} -s 0.9 -t {threads} \
            --h1 {input.hic_r1} --h2 {input.hic_r2} \
            -o {params.outprefix} {input.hifi}
        echo "~~~~ HiFiasm-HiC Assembly Complete ~~~~"
        """

rule purge_dups:
    input:
        gfa = lambda wildcards: config["workdir"] + "/{sample}/HiCHiFi/{sample}" + 
              (".hic.p_ctg.gfa" if has_hic(wildcards) else ".p_ctg.gfa")
    output:
        purged = config["workdir"] + "/{sample}/HiCHiFi/02_PurgeDups/purged.fa"
    threads: 64
    singularity: config["container"]
    shell:
        """
        echo "~~~~ Starting Purge_Dups for {wildcards.sample} ~~~~"
        cd $(dirname {output.purged})
        gfatools gfa2fa {input.gfa} > {wildcards.sample}.p_ctg.fa
        split_fa {wildcards.sample}.p_ctg.fa > asm.split
        minimap2 -t {threads} -xasm5 -DP asm.split asm.split | gzip -c > asm.split.self.paf.gz
        purge_dups -M1000 -E1000 asm.split.self.paf.gz > dups.bed
        get_seqs dups.bed {wildcards.sample}.p_ctg.fa
        echo "~~~~ Purge_Dups Complete ~~~~"
        """

rule haphic:
    input:
        assembly = rules.purge_dups.output.purged,
        hic_r1 = lambda wildcards: config["samples"][wildcards.sample]["hic_r1"],
        hic_r2 = lambda wildcards: config["samples"][wildcards.sample]["hic_r2"]
    output:
        scaffolds = config["workdir"] + "/{sample}/HiCHiFi/03_HapHiC/04.build/scaffolds.fa"
    threads: 64
    singularity: config["container"]
    conda: "envs/haphic.yaml"
    shell:
        """
        echo "~~~~ Starting HapHiC Scaffolding for {wildcards.sample} ~~~~"
        cd $(dirname $(dirname {output.scaffolds}))
        
        # Index reference
        bwa index {input.assembly}
        
        # Align Hi-C reads
        bwa mem -5SP -t {threads} {input.assembly} {input.hic_r1} {input.hic_r2} | \
            samblaster | samtools view - -@ {threads} -S -h -b -F 3340 -o HiC.bam
        
        # Filter alignments
        filter_bam HiC.bam 1 --nm 3 --threads {threads} | \
            samtools view - -b -@ {threads} -o HiC.filtered.bam
        
        # Run HapHiC pipeline
        haphic pipeline {input.assembly} HiC.filtered.bam 28 \
            --RE "GATC,GANTC" --correct_nrounds 2 \
            --threads {threads} --processes {threads} --max_inflation 7.0
        
        echo "~~~~ HapHiC Scaffolding Complete ~~~~"
        """

rule ragtag:
    input:
        assembly = lambda wildcards: rules.haphic.output.scaffolds if has_hic(wildcards) 
                  else rules.purge_dups.output.purged,
        reference = config["reference"]
    output:
        final = "Primary_Assemblies/{sample}.HifiasmHiFi-HiC-PurgeDups-RagTag.fa"
    threads: 64
    singularity: config["container"]
    params:
        outdir = config["workdir"] + "/{sample}/HiCHiFi/04_RagTag/ragtag_output"
    shell:
        """
        echo "~~~~ Starting RagTag Scaffolding for {wildcards.sample} ~~~~"
        mkdir -p $(dirname {params.outdir})
        ragtag.py scaffold {input.reference} {input.assembly} \
            -o {params.outdir} --aligner minimap2 -t {threads}
        sed 's/_RagTag//g' {params.outdir}/ragtag.scaffold.fasta > {output.final}
        echo "~~~~ RagTag Scaffolding Complete ~~~~"
        """

rule purge_dups_haplotypes:
    input:
        gfa = get_hap_files
    output:
        purged = "Primary_Assemblies/haplotypes/{sample}.hap{n}.purged.fa"
    threads: 64
    singularity: config["container"]
    shell:
        """
        echo "~~~~ Starting Purge_Dups for {wildcards.sample} Haplotype {wildcards.n} ~~~~"
        mkdir -p $(dirname {output.purged})
        cd $(dirname {output.purged})
        
        gfatools gfa2fa {input.gfa} > {wildcards.sample}.hap{wildcards.n}.fa
        split_fa {wildcards.sample}.hap{wildcards.n}.fa > asm.split
        minimap2 -t {threads} -xasm5 -DP asm.split asm.split | gzip -c > asm.split.self.paf.gz
        purge_dups -M1000 -E1000 asm.split.self.paf.gz > dups.bed
        get_seqs dups.bed {wildcards.sample}.hap{wildcards.n}.fa
        mv purged.fa {output.purged}
        
        echo "~~~~ Purge_Dups Complete for Haplotype {wildcards.n} ~~~~"
        """

rule busco:
    input:
        assembly = "Primary_Assemblies/{sample}.HifiasmHiFi-HiC-PurgeDups-RagTag.fa"
    output:
        summary = "Primary_Assemblies/busco/{sample}/short_summary.specific.embryophyta_odb10.{sample}.txt"
    threads: 64
    singularity: config["container"]
    params:
        outdir = "Primary_Assemblies/busco/{sample}",
        label = "{sample}"
    shell:
        """
        echo "~~~~ Starting BUSCO Analysis for {wildcards.sample} ~~~~"
        mkdir -p {params.outdir}
        cd {params.outdir}
        
        busco -i {input.assembly} \
            -l embryophyta_odb10 \
            -m genome \
            -c {threads} \
            -o {params.label} \
            -f
            
        mv {params.label}/short_summary.specific.embryophyta_odb10.{params.label}.txt .
        echo "~~~~ BUSCO Analysis Complete ~~~~"
        """